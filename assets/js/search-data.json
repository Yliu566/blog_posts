{
  
    
        "post0": {
            "title": "use anaconda to setup an environment",
            "content": "What is the conda environment? . conda environment is useful because you can build your own environment without meeting the situation some packages indepencies are conflict with those of another. . First of all, you need to install Anaconda or Miniconda. please refer to this link, download the installer and install Anaconda or Miniconda. . conda commands . check conda environment . conda env list . conda build a new environment . conda create -c conda-forge your_env_name . conda enter into or leave a specific environment . Enter: . conda activate your_env_name . Exit: . source deactivate . or . conda deactivate . about packages in the environment . To check all available packages: . conda list . conda list -n your_env_name . To check one package (e.g. rdkit) in your conda list . conda list | grep rdkit | . export environment as yml . conda env export &gt; environment.yml . create environment based on yml link: . conda env create -f environment.yml . update conda environment after making edits on yml file: . conda env update -f environment.yml . clone an environment . conda create -n python36 –clone python36_new . conda remove a specific environment . conda remove -n your_env_name –all . conda remove a package from a environment . conda remove –name $your_env_name $package_name . change download source of conda . check download resources conda config –set show_channel_urls yes . | add download sources to conda config conda config –add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ . | Also you will see the infomation in file ~/.condarc . pip download sources are changed by looking at the file: ~/.pip/pip.conf .",
            "url": "https://yliu566.github.io/blog_fastpages/cheatsheet/2022/06/02/conda-env-setup.html",
            "relUrl": "/cheatsheet/2022/06/02/conda-env-setup.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Git cheatsheet",
            "content": "git commands . Workspace Index / Stage Repository Remote . create a repository . Create a git repository in current directory . git init . Create a directory and initialize it as a git repository . git init [project-name] . Download a git repository . git clone [url] . configuration . The configuation file of Git is stored as .gitconfig. This file exits in the /home/USER/ as a configuration for global use, and also exists in repository folder as a configuration for specific use. . Display current Git configuration settings . git config –list . Edit the configuration file . git config -e [–global] . Set up the user info . git config [–global] user.name “[name]” git config [–global] user.email “[email address]” . add/remove file . Add specific file/files to stage areas . git add [file1] [file2] … . Add folder to stage areas . git add [dir] . Add all files in current folder to stage areas . git add . . If a file has multiple changes, it is okay to add every change individually . git add -p . Delete a file in the workspace and save this deletion to stage areas . git rm [file1] [file2] … . Stop track the changes of a file, this file will stay in workspace . git rm –cached [file] . Change file names, and save this rename action in stage areas . git mv [file-original] [file-renamed] . submit code . Submit files in stage areas to repository . git commit -m [message] . Submit specific files from Stage to Repository . git commit [file1] [file2] … -m [message] . Directly submit all changes after previous submission from Workspace to Repository . git commit -a . Display the difference info when submitting the code . git commit -v . If you want to change the commit message, you can use this code: (use only when no modification after previous commit): . git commit –amend -m [message] . Re-commit last code, including the new changes of certain files. . git commit –amend [file1] [file2] . branch . list all local branches . git branch . list all remote branches . gti branch -r . list all local and remote brances . git branch -a . Create a new branch (local) . git branch [branch-name] . Create a new branch (local), and switch to this branch . git checkout -b [branch-name] . Create a new branch and direct to certain commit . git branch [branch-name] [commit] . Create a new branch and add track with remote branch . git branch –track [branch] [remote-branch] . Switch to specific branch and update workspace . git checkout [branch-name] . Switch to last branch . git checkout - . Build track connection between current branch and remote branch . git branch –set-upstream [branch] [remote-branch] . Merge specific branch to current branch . git merge [branch] . Choose a commit and merge to current branch . git cherry-pick [commit] . Delete a branch . git branch -d [branch-name] . Delete a remote branch . git push origin –delete [branch-name] git branch -dr [remote/branch] . tags . List all tags . git tag . Create a tage for current commit . git tag [tag] . Create a tag for specific commit . git tag [tag] [commit] . Delete local tag . git tag -d [tag] . Delete remote tag . git push origin :refs/tags/[tagName] . Show tag infos . git show [tag] . Submit a specfic tag . git push [remote] [tag] . Submit all tags . git push [remote] –tags . Create a branch and direct to a specific tag . git checkout -b [branch] [tag] . visualize difference . Display changed files . git status . Display the history version of current branch . git log . Display history of commits and changed files in every commit . git log –stat . Search commit history by keywords . git log -S [keyword] . Display all changes afer a commit, and format displays as one commit per row. . git log [tag] HEAD –pretty=format:%s . Display all changes of a specific commit, of whose commit message fits seach words. . git log [tag] HEAD –grep feature . Display the version history of a file. . git log –follow [file] git whatchanged [file] . Display all differences of a file in every commit. . git log -p [file] . Show last 5 commits info. . git log -5 –pretty –oneline . Show users who add commits, ordered in frequency. . git shortlog -sn . Show who and when changed a file. . git blame [file] . Show the difference between workspace and stage. . git diff . Show the difference between stage and last commit. . git diff –cached [file] . Show the diffrence between workspace and the newest commit in current branch . git diff HEAD . Show the difference between two commits . git diff [first-branch]…[second-branch] . Show how many codes do you write today. . git diff –shortstat “@{0 day ago}” . Show changes of a specific commit . git show [commit] . Show file changes of a specific commit . git show –name-only [commit] . git show filename of a commit . git show [commit]:[filename] . Show recent commits of current branch . git reflog . remote sync . Download all changes from remote repository . git fetch [remote] . Display all remote repository . git remote -v . Display infomation of a remote repository . git remote show [remote] . Add a new remote repository and a name for the repository . git remote add [shortname] [url] . Pull the changes of the remote repository and merge it with local repository . git pull [remote] [branch] . Upload local branch of the repository to remote repository . git push [remote] [branch] . Force upload this current branch to remote repository ignoring conflicts. . git push [remote] –force . Push all branches to remote repository . git push [remote] –all . restoration . Restore file from Stage area to Workspace . git checkout [file] . Restore a file in a commit from Stage area to workspace . git checkout [commit] [file] . Restore all files from Stage area to Workspace . git checkout . . Restore a file from Stage and keep the file the same as last commit, but file in Workspace is unchanged . git reset [file] . Reset Stage area and Workspace to keep the same as last commit. . git reset –hard . Reset a commit of current branch, also reset the Stage area but change nothing in Workspace . git reset [commit] . Reset the HEAD of current branch as a specific commit, also reset stage and workspace to keep the same as the commit. . git reset –hard [commit] . Rest current HEAD as a specific commit, but keep no changes in stage and workspace. . git reset –keep [commit] . Create a new commit, which is used to restore another commit. The changes of the later commit will be restored by the former one and will be applied to current branch. . git revert [commit] . Temporally remove current uncommited changes and add them later . git stash git stash pop . Others . Create an archive file of a Git repository . git archive .",
            "url": "https://yliu566.github.io/blog_fastpages/cheatsheet/2022/06/01/git-cheatsheet.html",
            "relUrl": "/cheatsheet/2022/06/01/git-cheatsheet.html",
            "date": " • Jun 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Tutorial on using fastpages to blog in Jupyter Notebook",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yliu566.github.io/blog_fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Tutorial on using fastpages to blog in Markdown",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yliu566.github.io/blog_fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me and this blog",
          "content": "A little about Me . I am Yuru Liu. I am currently working as a Cheminformatics researcher in the AI department of a startup company located in Shanghai, China. My work is mainly about clearning and curing the large database for ML models as well as developing quantum descriptors for molecules as use in machine learning models. .",
          "url": "https://yliu566.github.io/blog_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yliu566.github.io/blog_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}