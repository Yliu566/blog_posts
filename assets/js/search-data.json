{
  
    
        "post0": {
            "title": "rdkit run reaction template",
            "content": "About . This notebook is about using reaction template. RDKit supports applying chemical reactions to sets of molecules. In this notebook, I will show how to use RDKit tools to get reaction template from sets of reactions; to use reaction template to get possible products from known reactants, how to use reaction template as a retro-synthesis way. . The code is firstly adapted from the documentaion of RDKit. I add more scripts to show more detailed functionalities of this tool. . Getting template (smarts string) from the reactions. . Frist, let&#39;s import useful modules that we need in our script. . from rdkit import Chem from rdkit.Chem import Draw from rdkit.Chem import AllChem from rdkit.Chem import Draw from rdkit.Chem.Draw import IPythonConsole from rdchiral import template_extractor . #&#39;reactant1.reactant2.&gt;&gt;product1.product2&#39; sample_rxn = &#39;[CH3:1][CH2:2][O:3][C:4](=[O:5])[c:6]1[n:7][cH:8][c:9]([cH:10][c:11]1[Cl:12])[C:13](=[O:14])O.[CH3:15][C:16]([CH3:17])([CH3:18])[OH:19]&gt;&gt;[CH3:1][CH2:2][O:3][C:4](=[O:5])[c:6]1[n:7][cH:8][c:9]([cH:10][c:11]1[Cl:12])[C:13](=[O:14])[O:19][C:16]([CH3:15])([CH3:17])[CH3:18]&#39; reactants_smi, prods_smi = sample_rxn.split(&#39;&gt;&gt;&#39;) . reactants_mol = Chem.MolFromSmiles(reactants_smi) Draw.MolToImage(reactants_mol, (250,250)) . prods_mol = Chem.MolFromSmiles(prods_smi) Draw.MolToImage(prods_mol, (250,250)) . rxn = {} rxn[&#39;reactants&#39;] = reactants_smi rxn[&#39;products&#39;] = prods_smi rxn[&#39;_id&#39;] = 1 . template = template_extractor.extract_from_reaction(rxn) print(template) . products_mol = Chem.MolFromSmarts(&#39;[#7;a:5]:[c:4]:[c:3]-[C;H0;D3;+0:1](=[O;D1;H0:2])-[O;H0;D2;+0:10]-[C:7](-[C;D1;H3:6])(-[C;D1;H3:8])-[C;D1;H3:9]&#39;) products_mol Draw.MolToImage(products_mol, (250,250)) . reactants_mol = Chem.MolFromSmarts(&#39;O-[C;H0;D3;+0:1](=[O;D1;H0:2])-[c:3]:[c:4]:[#7;a:5].[C;D1;H3:6]-[C:7](-[C;D1;H3:8])(-[C;D1;H3:9])-[OH;D1;+0:10]&#39;) reactants_mol Draw.MolToImage(reactants_mol, (250,250)) . reaction_smarts =&#39;[#7;a:5]:[c:4]:[c:3]-[C;H0;D3;+0:1](=[O;D1;H0:2])-[O;H0;D2;+0:10]-[C:7](-[C;D1;H3:6])(-[C;D1;H3:8])-[C;D1;H3:9]&gt;&gt;O-[C;H0;D3;+0:1](=[O;D1;H0:2])-[c:3]:[c:4]:[#7;a:5].[C;D1;H3:6]-[C:7](-[C;D1;H3:8])(-[C;D1;H3:9])-[OH;D1;+0:10]&#39; retro_rxn = AllChem.ReactionFromSmarts(reaction_smarts) retro_rxn . Using template (a reaction smarts) to get products from known reactants . def mol_with_atom_index(mol): for atom in mol.GetAtoms(): atom.SetAtomMapNum(atom.GetIdx()) return mol . rxn = AllChem.ReactionFromSmarts(&#39;[C:1](=[O:2])-[OD1].[N!H0:3]&gt;&gt;[C:1](=[O:2])[N:3]&#39;) rxn . Let&#39;s take Suzuki Coupling for our practice. . rxn = AllChem.ReactionFromSmarts(&#39;[c:1]B(O)O.[I,F,Br,Cl][c:2]&gt;&gt;[c:1][c:2]&#39;) rxn . reacts = (Chem.MolFromSmiles(&#39;OB(C1=CC=CC=C1)O&#39;),Chem.MolFromSmiles(&#39;BrC1=CC=C(S)C=C1&#39;))#cannot exchange position products = rxn.RunReactants(reacts) products . ((&lt;rdkit.Chem.rdchem.Mol at 0x7f5379096030&gt;,), (&lt;rdkit.Chem.rdchem.Mol at 0x7f5379096090&gt;,)) . prod_mol = products[0][0] mol_with_atom_index(prod_mol) . prod_mol = products[1][0] mol_with_atom_index(prod_mol) . try to write another Suzuki reaction template . rxn = AllChem.ReactionFromSmarts(&#39;[c:1]B(O[CX4])O[CX4].[I,F,Br,Cl][c:2]&gt;&gt;[c:1][c:2]&#39;) rxn . reacts = (Chem.MolFromSmiles(&#39;COB(C1=CC=CC=C1)OC&#39;),Chem.MolFromSmiles(&#39;BrC1=CC=C(S)C=C1&#39;))#cannot exchange position products = rxn.RunReactants(reacts) products . ((&lt;rdkit.Chem.rdchem.Mol at 0x7f5378f989f0&gt;,), (&lt;rdkit.Chem.rdchem.Mol at 0x7f5378f98b10&gt;,)) . prod_mol = products[0][0] prod_mol . prod_mol = products[1][0] prod_mol . mol1 = Chem.MolFromSmiles(&#39;OB(C1=CC=CC=C1)O&#39;) mol2 = Chem.MolFromSmiles(&#39;BrC1=CC=C(S)C=C1&#39;) Draw.MolsToGridImage([mol1, mol2]) . Another template example, converting forward template into retro template . rxn = AllChem.ReactionFromSmarts(&#39;[cH1:1]1:[c:2](-[CH2:7]-[CH2:8]-[NH2:9]):[c:3]:[c:4]:[c:5]:[c:6]:1.[#6:11]-[CH1;R0:10]=[OD1]&gt;&gt;[c:1]12:[c:2](-[CH2:7]-[CH2:8]-[NH1:9]-[C:10]-2(-[#6:11])):[c:3]:[c:4]:[c:5]:[c:6]:1&#39;) rxn #forward . mol1 = Chem.MolFromSmiles(&#39;[cH1:1]1:[c:2](-[CH2:7]-[CH2:8]-[NH2:9]):[c:3]:[c:4]:[c:5]:[c:6]:1&#39;) for atom in mol.GetAtoms(): if atom.HasProp(&#39;molAtomMapNumber&#39;): atom.ClearProp(&#39;molAtomMapNumber&#39;) smi1 = Chem.MolToSmiles(mol1) print(smi1) mol1_noidx = Chem.MolFromSmiles(smi1) mol1_noidx . rxn = AllChem.ReactionFromSmarts(&#39;[C:1]=[C:2].[C:3]=[*:4][*:5]=[C:6]&gt;&gt;[C:1]1[C:2][C:3][*:4]=[*:5][C:6]1&#39;) rxn . Chem.MolFromSmiles(&#39;OC=C&#39;) . Chem.MolFromSmiles(&#39;C=CC(N)=C&#39;) . ps = rxn.RunReactants((Chem.MolFromSmiles(&#39;OC=C&#39;), Chem.MolFromSmiles(&#39;C=CC(N)=C&#39;))) ps . ((&lt;rdkit.Chem.rdchem.Mol at 0x7f5348cbb1b0&gt;,), (&lt;rdkit.Chem.rdchem.Mol at 0x7f5348cbbed0&gt;,), (&lt;rdkit.Chem.rdchem.Mol at 0x7f5348cbb150&gt;,), (&lt;rdkit.Chem.rdchem.Mol at 0x7f5348cbb270&gt;,)) . Draw.MolsToGridImage([ps[0][0], ps[1][0], ps[2][0], ps[3][0]], molsPerRow=4) . for i in range(4): smi = Chem.MolToSmiles(ps[i][0]) print(smi) . NC1=CCCC(O)C1 NC1=CCC(O)CC1 NC1=CCC(O)CC1 NC1=CCCC(O)C1 .",
            "url": "https://yliu566.github.io/blog_fastpages/cheminformatics-rdkit/2022/09/06/rdkit_run_rxn_template.html",
            "relUrl": "/cheminformatics-rdkit/2022/09/06/rdkit_run_rxn_template.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "use anaconda to setup an environment",
            "content": "What is the conda environment? . conda environment is useful because you can build your own environment without conflict with other packages. . conda commands . check conda environment . conda env list . conda build a new environment . conda create -c conda-forge your_env_name . conda enter into or leave a specific environment . Enter: . conda activate your_env_name . Exit: . source deactivate . or . conda deactivate . about packages in the environment . To check all available packages: . conda list . conda list -n your_env_name . export environment as yml . conda env export &gt; environment.yml . create environment based on yml link: . conda env create -f environment.yml . update conda environment after making edits on yml file: . conda env update -f environment.yml . clone an environment . conda create -n python36 –clone python36_new . conda remove a specific environment . conda remove -n your_env_name –all . conda remove a package from a environment . conda remove –name $your_env_name $package_name . change download source of conda . check download resources conda config –set show_channel_urls yes . | add download sources to conda config conda config –add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ . | Also you will see the infomation in file ~/.condarc . pip download sources are changed by looking at the file: ~/.pip/pip.conf .",
            "url": "https://yliu566.github.io/blog_fastpages/ubuntu/2022/06/02/conda-env-setup.html",
            "relUrl": "/ubuntu/2022/06/02/conda-env-setup.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Tutorial on using fastpages to blog in Jupyter Notebook",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yliu566.github.io/blog_fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Tutorial on using fastpages to blog in Markdown",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yliu566.github.io/blog_fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me and this blog",
          "content": "A little about Me . I am Yuru Liu. I am now working as a Cheminformatics researcher in the AI department of a starup company ChemLex in Shanghai, China. My work is mainly about clearning and curing the large database for ML models as well as developing quantum descriptors for molecules as use in model . . A little about this blog .",
          "url": "https://yliu566.github.io/blog_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yliu566.github.io/blog_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}