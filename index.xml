<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Yuru&#39;s blog posts</title>
<link>https://yliu566.github.io/blog_posts/index.html</link>
<atom:link href="https://yliu566.github.io/blog_posts/index.xml" rel="self" type="application/rss+xml"/>
<description>A great sample blog</description>
<generator>quarto-1.3.353</generator>
<lastBuildDate>Fri, 19 May 2023 16:00:00 GMT</lastBuildDate>
<item>
  <title>Welcome To My Blog</title>
  <link>https://yliu566.github.io/blog_posts/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>This is my first post in a Quarto blog. Welcome!</p>
<p><img src="https://yliu566.github.io/blog_posts/posts/welcome/thumbnail.jpg" class="img-fluid"></p>
<p>I am now starting to migrate from fastpages to <a href="https://quarto.org/docs/websites/website-blog.html">quarto</a>. Let’s see how everything goes here.</p>
<p>Looking forward to using Quarto.</p>



 ]]></description>
  <category>news</category>
  <guid>https://yliu566.github.io/blog_posts/posts/welcome/index.html</guid>
  <pubDate>Fri, 19 May 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Use anaconda to setup an environment</title>
  <link>https://yliu566.github.io/blog_posts/posts/2022-06-02-conda-env-setup.html</link>
  <description><![CDATA[ 




<section id="what-is-the-conda-environment" class="level2">
<h2 class="anchored" data-anchor-id="what-is-the-conda-environment">What is the conda environment?</h2>
<p>conda environment is useful because you can build your own environment without meeting the situation some packages indepencies are conflict with those of another.</p>
<p>First of all, you need to install Anaconda or Miniconda. please refer to <a href="https://conda.io/projects/conda/en/stable/user-guide/install/linux.html#install-linux-silent">this link</a>, download the installer and install Anaconda or Miniconda.</p>
</section>
<section id="conda-commands" class="level2">
<h2 class="anchored" data-anchor-id="conda-commands">conda commands</h2>
<section id="check-conda-environment" class="level3">
<h3 class="anchored" data-anchor-id="check-conda-environment">check conda environment</h3>
<blockquote class="blockquote">
<p>conda env list</p>
</blockquote>
</section>
<section id="conda-build-a-new-environment" class="level3">
<h3 class="anchored" data-anchor-id="conda-build-a-new-environment">conda build a new environment</h3>
<blockquote class="blockquote">
<p>conda create -c conda-forge your_env_name</p>
</blockquote>
</section>
<section id="conda-enter-into-or-leave-a-specific-environment" class="level3">
<h3 class="anchored" data-anchor-id="conda-enter-into-or-leave-a-specific-environment">conda enter into or leave a specific environment</h3>
<p>Enter:</p>
<blockquote class="blockquote">
<p>conda activate your_env_name</p>
</blockquote>
<p>Exit:</p>
<blockquote class="blockquote">
<p>source deactivate</p>
</blockquote>
<p>or</p>
<blockquote class="blockquote">
<p>conda deactivate</p>
</blockquote>
</section>
<section id="about-packages-in-the-environment" class="level3">
<h3 class="anchored" data-anchor-id="about-packages-in-the-environment">about packages in the environment</h3>
<p>To check all available packages:</p>
<blockquote class="blockquote">
<p>conda list</p>
</blockquote>
<blockquote class="blockquote">
<p>conda list -n your_env_name</p>
</blockquote>
<p>To check one package (e.g.&nbsp;rdkit) in your conda list</p>
<blockquote class="blockquote">
<p>conda list | grep rdkit</p>
</blockquote>
</section>
<section id="export-environment-as-yml" class="level3">
<h3 class="anchored" data-anchor-id="export-environment-as-yml">export environment as yml</h3>
<!-- 导出环境为yml -->
<blockquote class="blockquote">
<p>conda env export &gt; environment.yml</p>
</blockquote>
<!-- 根据yml创建环境 -->
<p>create environment based on yml link:</p>
<blockquote class="blockquote">
<p>conda env create -f environment.yml</p>
</blockquote>
<!-- 对yml文件修改后更新环境 -->
<p>update conda environment after making edits on yml file:</p>
<blockquote class="blockquote">
<p>conda env update -f environment.yml</p>
</blockquote>
</section>
<section id="clone-an-environment" class="level3">
<h3 class="anchored" data-anchor-id="clone-an-environment">clone an environment</h3>
<!-- 复制环境 -->
<blockquote class="blockquote">
<p>conda create -n python36 –clone python36_new</p>
</blockquote>
</section>
<section id="conda-remove-a-specific-environment" class="level3">
<h3 class="anchored" data-anchor-id="conda-remove-a-specific-environment">conda remove a specific environment</h3>
<!-- 删除环境： -->
<blockquote class="blockquote">
<p>conda remove -n your_env_name –all</p>
</blockquote>
<!-- 删除虚拟环境中的包： -->
<p>conda remove a package from a environment</p>
<blockquote class="blockquote">
<p>conda remove –name $your_env_name $package_name</p>
</blockquote>
</section>
<section id="change-download-source-of-conda" class="level3">
<h3 class="anchored" data-anchor-id="change-download-source-of-conda">change download source of conda</h3>
<!-- 更改镜像源 -->
<ol type="1">
<li>check download resources</li>
</ol>
<blockquote class="blockquote">
<p>conda config –set show_channel_urls yes</p>
</blockquote>
<ol start="2" type="1">
<li>add download sources to conda config</li>
</ol>
<blockquote class="blockquote">
<p>conda config –add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</p>
</blockquote>
<p>Also you will see the infomation in file ~/.condarc <!-- 修改后可以在~/.condarc配置文件中可以看到相应信息 --></p>
<p>pip download sources are changed by looking at the file: ~/.pip/pip.conf <!-- pip修改镜像源（修改~/.pip/pip.conf配置文件） --></p>


</section>
</section>

 ]]></description>
  <category>cheatsheet</category>
  <guid>https://yliu566.github.io/blog_posts/posts/2022-06-02-conda-env-setup.html</guid>
  <pubDate>Wed, 01 Jun 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Git cheatsheet</title>
  <link>https://yliu566.github.io/blog_posts/posts/2022-06-01-git-cheatsheet.html</link>
  <description><![CDATA[ 




<section id="git-commands" class="level1">
<h1>git commands</h1>
<p>Workspace <!-- 工作区 --> Index / Stage <!-- 暂存区 --> Repository <!-- 仓库区（或本地仓库） --> Remote <!-- 远程仓库 --></p>
<section id="create-a-repository" class="level2">
<h2 class="anchored" data-anchor-id="create-a-repository">create a repository</h2>
<p>Create a git repository in current directory <!-- 在当前目录新建一个Git代码库 --></p>
<blockquote class="blockquote">
<p>git init</p>
</blockquote>
<p>Create a directory and initialize it as a git repository <!-- 新建一个目录，将其初始化为Git代码库 --></p>
<blockquote class="blockquote">
<p>git init [project-name]</p>
</blockquote>
<p>Download a git repository <!-- 下载一个项目和它的整个代码历史 --></p>
<blockquote class="blockquote">
<p>git clone [url]</p>
</blockquote>
</section>
<section id="configuration" class="level2">
<h2 class="anchored" data-anchor-id="configuration">configuration</h2>
<p>The configuation file of Git is stored as .gitconfig. This file exits in the /home/USER/ as a configuration for global use, and also exists in repository folder as a configuration for specific use. <!-- Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 --></p>
<p>Display current Git configuration settings</p>
<blockquote class="blockquote">
<p>git config –list</p>
</blockquote>
<p>Edit the configuration file</p>
<blockquote class="blockquote">
<p>git config -e [–global]</p>
</blockquote>
<p>Set up the user info</p>
<blockquote class="blockquote">
<p>git config [–global] user.name “[name]”</p>
<p>git config [–global] user.email “[email address]”</p>
</blockquote>
</section>
<section id="addremove-file" class="level2">
<h2 class="anchored" data-anchor-id="addremove-file">add/remove file</h2>
<p>Add specific file/files to stage areas</p>
<blockquote class="blockquote">
<p>git add [file1] [file2] …</p>
</blockquote>
<p>Add folder to stage areas</p>
<blockquote class="blockquote">
<p>git add [dir]</p>
</blockquote>
<p>Add all files in current folder to stage areas</p>
<blockquote class="blockquote">
<p>git add .</p>
</blockquote>
<p>If a file has multiple changes, it is okay to add every change individually</p>
<blockquote class="blockquote">
<p>git add -p</p>
</blockquote>
<p>Delete a file in the workspace and save this deletion to stage areas</p>
<blockquote class="blockquote">
<p>git rm [file1] [file2] …</p>
</blockquote>
<p>Stop track the changes of a file, this file will stay in workspace</p>
<blockquote class="blockquote">
<p>git rm –cached [file]</p>
</blockquote>
<p>Change file names, and save this rename action in stage areas</p>
<blockquote class="blockquote">
<p>git mv [file-original] [file-renamed]</p>
</blockquote>
</section>
<section id="submit-code" class="level2">
<h2 class="anchored" data-anchor-id="submit-code">submit code</h2>
<p>Submit files in stage areas to repository</p>
<blockquote class="blockquote">
<p>git commit -m [message]</p>
</blockquote>
<p>Submit specific files from Stage to Repository</p>
<blockquote class="blockquote">
<p>git commit [file1] [file2] … -m [message]</p>
</blockquote>
<p>Directly submit all changes after previous submission from Workspace to Repository</p>
<blockquote class="blockquote">
<p>git commit -a</p>
</blockquote>
<p>Display the difference info when submitting the code</p>
<blockquote class="blockquote">
<p>git commit -v</p>
</blockquote>
<p>If you want to change the commit message, you can use this code: (use only when no modification after previous commit):</p>
<blockquote class="blockquote">
<p>git commit –amend -m [message]</p>
</blockquote>
<p>Re-commit last code, including the new changes of certain files.</p>
<blockquote class="blockquote">
<p>git commit –amend [file1] [file2]</p>
</blockquote>
</section>
<section id="branch" class="level2">
<h2 class="anchored" data-anchor-id="branch">branch</h2>
<p>list all local branches</p>
<blockquote class="blockquote">
<p>git branch</p>
</blockquote>
<p>list all remote branches</p>
<blockquote class="blockquote">
<p>gti branch -r</p>
</blockquote>
<p>list all local and remote brances</p>
<blockquote class="blockquote">
<p>git branch -a</p>
</blockquote>
<p>Create a new branch (local)</p>
<blockquote class="blockquote">
<p>git branch [branch-name]</p>
</blockquote>
<p>Create a new branch (local), and switch to this branch</p>
<blockquote class="blockquote">
<p>git checkout -b [branch-name]</p>
</blockquote>
<p>Create a new branch and direct to certain commit</p>
<blockquote class="blockquote">
<p>git branch [branch-name] [commit]</p>
</blockquote>
<p>Create a new branch and add track with remote branch</p>
<blockquote class="blockquote">
<p>git branch –track branch [remote-branch]</p>
</blockquote>
<p>Switch to specific branch and update workspace</p>
<blockquote class="blockquote">
<p>git checkout [branch-name]</p>
</blockquote>
<p>Switch to last branch</p>
<blockquote class="blockquote">
<p>git checkout -</p>
</blockquote>
<p>Build track connection between current branch and remote branch</p>
<blockquote class="blockquote">
<p>git branch –set-upstream branch [remote-branch]</p>
</blockquote>
<p>Merge specific branch to current branch</p>
<blockquote class="blockquote">
<p>git merge branch</p>
</blockquote>
<p>Choose a commit and merge to current branch</p>
<blockquote class="blockquote">
<p>git cherry-pick [commit]</p>
</blockquote>
<p>Delete a branch</p>
<blockquote class="blockquote">
<p>git branch -d [branch-name]</p>
</blockquote>
<p>Delete a remote branch</p>
<blockquote class="blockquote">
<p>git push origin –delete [branch-name]</p>
<p>git branch -dr [remote/branch]</p>
</blockquote>
</section>
<section id="tags" class="level2">
<h2 class="anchored" data-anchor-id="tags">tags</h2>
<p>List all tags</p>
<blockquote class="blockquote">
<p>git tag</p>
</blockquote>
<p>Create a tage for current commit</p>
<blockquote class="blockquote">
<p>git tag [tag]</p>
</blockquote>
<p>Create a tag for specific commit</p>
<blockquote class="blockquote">
<p>git tag [tag] [commit]</p>
</blockquote>
<p>Delete local tag</p>
<blockquote class="blockquote">
<p>git tag -d [tag]</p>
</blockquote>
<p>Delete remote tag</p>
<blockquote class="blockquote">
<p>git push origin :refs/tags/[tagName]</p>
</blockquote>
<p>Show tag infos</p>
<blockquote class="blockquote">
<p>git show [tag]</p>
</blockquote>
<p>Submit a specfic tag</p>
<blockquote class="blockquote">
<p>git push [remote] [tag]</p>
</blockquote>
<p>Submit all tags</p>
<blockquote class="blockquote">
<p>git push [remote] –tags</p>
</blockquote>
<p>Create a branch and direct to a specific tag</p>
<blockquote class="blockquote">
<p>git checkout -b branch [tag]</p>
</blockquote>
</section>
<section id="visualize-difference" class="level2">
<h2 class="anchored" data-anchor-id="visualize-difference">visualize difference</h2>
<p>Display changed files</p>
<blockquote class="blockquote">
<p>git status</p>
</blockquote>
<p>Display the history version of current branch</p>
<blockquote class="blockquote">
<p>git log</p>
</blockquote>
<p>Display history of commits and changed files in every commit</p>
<blockquote class="blockquote">
<p>git log –stat</p>
</blockquote>
<p>Search commit history by keywords</p>
<blockquote class="blockquote">
<p>git log -S [keyword]</p>
</blockquote>
<p>Display all changes afer a commit, and format displays as one commit per row.</p>
<blockquote class="blockquote">
<p>git log [tag] HEAD –pretty=format:%s</p>
</blockquote>
<!-- 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件 -->
<p>Display all changes of a specific commit, of whose commit message fits seach words.</p>
<blockquote class="blockquote">
<p>git log [tag] HEAD –grep feature</p>
</blockquote>
<p>Display the version history of a file.</p>
<blockquote class="blockquote">
<p>git log –follow [file]</p>
<p>git whatchanged [file]</p>
</blockquote>
<p>Display all differences of a file in every commit.</p>
<blockquote class="blockquote">
<p>git log -p [file]</p>
</blockquote>
<p>Show last 5 commits info.</p>
<blockquote class="blockquote">
<p>git log -5 –pretty –oneline</p>
</blockquote>
<p>Show users who add commits, ordered in frequency.</p>
<blockquote class="blockquote">
<p>git shortlog -sn</p>
</blockquote>
<p>Show who and when changed a file.</p>
<blockquote class="blockquote">
<p>git blame [file]</p>
</blockquote>
<p>Show the difference between workspace and stage.</p>
<blockquote class="blockquote">
<p>git diff</p>
</blockquote>
<p>Show the difference between stage and last commit.</p>
<blockquote class="blockquote">
<p>git diff –cached [file]</p>
</blockquote>
<p>Show the diffrence between workspace and the newest commit in current branch</p>
<blockquote class="blockquote">
<p>git diff HEAD</p>
</blockquote>
<p>Show the difference between two commits</p>
<blockquote class="blockquote">
<p>git diff [first-branch]…[second-branch]</p>
</blockquote>
<p>Show how many codes do you write today.</p>
<blockquote class="blockquote">
<p>git diff –shortstat “@{0 day ago}”</p>
</blockquote>
<p>Show changes of a specific commit</p>
<blockquote class="blockquote">
<p>git show [commit]</p>
</blockquote>
<p>Show file changes of a specific commit</p>
<blockquote class="blockquote">
<p>git show –name-only [commit]</p>
</blockquote>
<p>git show filename of a commit</p>
<blockquote class="blockquote">
<p>git show [commit]:[filename]</p>
</blockquote>
<p>Show recent commits of current branch</p>
<blockquote class="blockquote">
<p>git reflog</p>
</blockquote>
</section>
<section id="remote-sync" class="level2">
<h2 class="anchored" data-anchor-id="remote-sync">remote sync</h2>
<p>Download all changes from remote repository</p>
<blockquote class="blockquote">
<p>git fetch [remote]</p>
</blockquote>
<p>Display all remote repository</p>
<blockquote class="blockquote">
<p>git remote -v</p>
</blockquote>
<p>Display infomation of a remote repository</p>
<blockquote class="blockquote">
<p>git remote show [remote]</p>
</blockquote>
<p>Add a new remote repository and a name for the repository</p>
<blockquote class="blockquote">
<p>git remote add [shortname] [url]</p>
</blockquote>
<p>Pull the changes of the remote repository and merge it with local repository</p>
<blockquote class="blockquote">
<p>git pull [remote] branch</p>
</blockquote>
<p>Upload local branch of the repository to remote repository</p>
<blockquote class="blockquote">
<p>git push [remote] branch</p>
</blockquote>
<p>Force upload this current branch to remote repository ignoring conflicts.</p>
<blockquote class="blockquote">
<p>git push [remote] –force</p>
</blockquote>
<p>Push all branches to remote repository</p>
<blockquote class="blockquote">
<p>git push [remote] –all</p>
</blockquote>
</section>
<section id="restoration" class="level2">
<h2 class="anchored" data-anchor-id="restoration">restoration</h2>
<p>Restore file from Stage area to Workspace</p>
<blockquote class="blockquote">
<p>git checkout [file]</p>
</blockquote>
<p>Restore a file in a commit from Stage area to workspace</p>
<blockquote class="blockquote">
<p>git checkout [commit] [file]</p>
</blockquote>
<p>Restore all files from Stage area to Workspace</p>
<blockquote class="blockquote">
<p>git checkout .</p>
</blockquote>
<p>Restore a file from Stage and keep the file the same as last commit, but file in Workspace is unchanged</p>
<blockquote class="blockquote">
<p>git reset [file]</p>
</blockquote>
<p>Reset Stage area and Workspace to keep the same as last commit.</p>
<blockquote class="blockquote">
<p>git reset –hard</p>
</blockquote>
<!-- 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 -->
<p>Reset a commit of current branch, also reset the Stage area but change nothing in Workspace</p>
<blockquote class="blockquote">
<p>git reset [commit]</p>
</blockquote>
<!-- 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 -->
<p>Reset the HEAD of current branch as a specific commit, also reset stage and workspace to keep the same as the commit.</p>
<blockquote class="blockquote">
<p>git reset –hard [commit]</p>
</blockquote>
<!-- 重置当前HEAD为指定commit，但保持暂存区和工作区不变 -->
<p>Rest current HEAD as a specific commit, but keep no changes in stage and workspace.</p>
<blockquote class="blockquote">
<p>git reset –keep [commit]</p>
</blockquote>
<!-- 新建一个commit，用来撤销指定commit,后者的所有变化都将被前者抵消，并且应用到当前分支 -->
<p>Create a new commit, which is used to restore another commit. The changes of the later commit will be restored by the former one and will be applied to current branch.</p>
<blockquote class="blockquote">
<p>git revert [commit]</p>
</blockquote>
<!-- 暂时将未提交的变化移除，稍后再移入 -->
<p>Temporally remove current uncommited changes and add them later</p>
<blockquote class="blockquote">
<p>git stash</p>
</blockquote>
<blockquote class="blockquote">
<p>git stash pop</p>
</blockquote>
</section>
<section id="others" class="level2">
<h2 class="anchored" data-anchor-id="others">Others</h2>
<p>Create an archive file of a Git repository</p>
<blockquote class="blockquote">
<p>git archive</p>
</blockquote>
<p><the end=""></the></p>
<!-- some of the code comes to this reference: [A blog post](https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html) -->


</section>
</section>

 ]]></description>
  <category>cheatsheet</category>
  <guid>https://yliu566.github.io/blog_posts/posts/2022-06-01-git-cheatsheet.html</guid>
  <pubDate>Tue, 31 May 2022 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
