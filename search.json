[
  {
    "objectID": "posts/2023-05-24-nice-blog-to-read.html",
    "href": "posts/2023-05-24-nice-blog-to-read.html",
    "title": "Blog posts in the field of cheminformatics",
    "section": "",
    "text": "Here are some blogposts with topics in cheminformatics which I enjoyed reading a lot. There for sure are more. I will update the list whenever I find one that is related.\n\nAI in Drug Discovery by Andreas Bender. Andreas Bender is professor who collects news in the cheminformatics community and distributs the news as in a monthly blogpost.\nThe RDKit Blog by Greg Landrum. Before his migration to github, he wrote blogs on blogspot platform. The blog site is here.\nPractical Cheminformatics by Pat Walters. There also four posts here.\nIs life worth living? by iwatobipen. There is also a blogsite on the Github platform, but I guess he doesn’t use it a lot.\nPGG’s blog by Pushkar G. Ghanekar.\nNoel O’Blog by Noel O’Boyle\nCheminformania by Esben Jannik Bjerrum.\nChem-bla-ics by Egon Willighagen\nDepth-First by Richard L. Apodaca.\nReverie Labs’ blog by people in Reverie Labs."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is my first post in a Quarto blog. Welcome!\n\nI am now starting to migrate from fastpages to quarto. Let’s see how everything goes here.\nLooking forward to using Quarto."
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html",
    "href": "posts/2022-06-01-git-cheatsheet.html",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Workspace  Index / Stage  Repository  Remote \n\n\nCreate a git repository in current directory \n\ngit init\n\nCreate a directory and initialize it as a git repository \n\ngit init [project-name]\n\nDownload a git repository \n\ngit clone [url]\n\n\n\n\nThe configuation file of Git is stored as .gitconfig. This file exits in the /home/USER/ as a configuration for global use, and also exists in repository folder as a configuration for specific use. \nDisplay current Git configuration settings\n\ngit config –list\n\nEdit the configuration file\n\ngit config -e [–global]\n\nSet up the user info\n\ngit config [–global] user.name “[name]”\ngit config [–global] user.email “[email address]”\n\n\n\n\nAdd specific file/files to stage areas\n\ngit add [file1] [file2] …\n\nAdd folder to stage areas\n\ngit add [dir]\n\nAdd all files in current folder to stage areas\n\ngit add .\n\nIf a file has multiple changes, it is okay to add every change individually\n\ngit add -p\n\nDelete a file in the workspace and save this deletion to stage areas\n\ngit rm [file1] [file2] …\n\nStop track the changes of a file, this file will stay in workspace\n\ngit rm –cached [file]\n\nChange file names, and save this rename action in stage areas\n\ngit mv [file-original] [file-renamed]\n\n\n\n\nSubmit files in stage areas to repository\n\ngit commit -m [message]\n\nSubmit specific files from Stage to Repository\n\ngit commit [file1] [file2] … -m [message]\n\nDirectly submit all changes after previous submission from Workspace to Repository\n\ngit commit -a\n\nDisplay the difference info when submitting the code\n\ngit commit -v\n\nIf you want to change the commit message, you can use this code: (use only when no modification after previous commit):\n\ngit commit –amend -m [message]\n\nRe-commit last code, including the new changes of certain files.\n\ngit commit –amend [file1] [file2]\n\n\n\n\nlist all local branches\n\ngit branch\n\nlist all remote branches\n\ngti branch -r\n\nlist all local and remote brances\n\ngit branch -a\n\nCreate a new branch (local)\n\ngit branch [branch-name]\n\nCreate a new branch (local), and switch to this branch\n\ngit checkout -b [branch-name]\n\nCreate a new branch and direct to certain commit\n\ngit branch [branch-name] [commit]\n\nCreate a new branch and add track with remote branch\n\ngit branch –track branch [remote-branch]\n\nSwitch to specific branch and update workspace\n\ngit checkout [branch-name]\n\nSwitch to last branch\n\ngit checkout -\n\nBuild track connection between current branch and remote branch\n\ngit branch –set-upstream branch [remote-branch]\n\nMerge specific branch to current branch\n\ngit merge branch\n\nChoose a commit and merge to current branch\n\ngit cherry-pick [commit]\n\nDelete a branch\n\ngit branch -d [branch-name]\n\nDelete a remote branch\n\ngit push origin –delete [branch-name]\ngit branch -dr [remote/branch]\n\n\n\n\nList all tags\n\ngit tag\n\nCreate a tage for current commit\n\ngit tag [tag]\n\nCreate a tag for specific commit\n\ngit tag [tag] [commit]\n\nDelete local tag\n\ngit tag -d [tag]\n\nDelete remote tag\n\ngit push origin :refs/tags/[tagName]\n\nShow tag infos\n\ngit show [tag]\n\nSubmit a specfic tag\n\ngit push [remote] [tag]\n\nSubmit all tags\n\ngit push [remote] –tags\n\nCreate a branch and direct to a specific tag\n\ngit checkout -b branch [tag]\n\n\n\n\nDisplay changed files\n\ngit status\n\nDisplay the history version of current branch\n\ngit log\n\nDisplay history of commits and changed files in every commit\n\ngit log –stat\n\nSearch commit history by keywords\n\ngit log -S [keyword]\n\nDisplay all changes afer a commit, and format displays as one commit per row.\n\ngit log [tag] HEAD –pretty=format:%s\n\n\nDisplay all changes of a specific commit, of whose commit message fits seach words.\n\ngit log [tag] HEAD –grep feature\n\nDisplay the version history of a file.\n\ngit log –follow [file]\ngit whatchanged [file]\n\nDisplay all differences of a file in every commit.\n\ngit log -p [file]\n\nShow last 5 commits info.\n\ngit log -5 –pretty –oneline\n\nShow users who add commits, ordered in frequency.\n\ngit shortlog -sn\n\nShow who and when changed a file.\n\ngit blame [file]\n\nShow the difference between workspace and stage.\n\ngit diff\n\nShow the difference between stage and last commit.\n\ngit diff –cached [file]\n\nShow the diffrence between workspace and the newest commit in current branch\n\ngit diff HEAD\n\nShow the difference between two commits\n\ngit diff [first-branch]…[second-branch]\n\nShow how many codes do you write today.\n\ngit diff –shortstat “@{0 day ago}”\n\nShow changes of a specific commit\n\ngit show [commit]\n\nShow file changes of a specific commit\n\ngit show –name-only [commit]\n\ngit show filename of a commit\n\ngit show [commit]:[filename]\n\nShow recent commits of current branch\n\ngit reflog\n\n\n\n\nDownload all changes from remote repository\n\ngit fetch [remote]\n\nDisplay all remote repository\n\ngit remote -v\n\nDisplay infomation of a remote repository\n\ngit remote show [remote]\n\nAdd a new remote repository and a name for the repository\n\ngit remote add [shortname] [url]\n\nPull the changes of the remote repository and merge it with local repository\n\ngit pull [remote] branch\n\nUpload local branch of the repository to remote repository\n\ngit push [remote] branch\n\nForce upload this current branch to remote repository ignoring conflicts.\n\ngit push [remote] –force\n\nPush all branches to remote repository\n\ngit push [remote] –all\n\n\n\n\nRestore file from Stage area to Workspace\n\ngit checkout [file]\n\nRestore a file in a commit from Stage area to workspace\n\ngit checkout [commit] [file]\n\nRestore all files from Stage area to Workspace\n\ngit checkout .\n\nRestore a file from Stage and keep the file the same as last commit, but file in Workspace is unchanged\n\ngit reset [file]\n\nReset Stage area and Workspace to keep the same as last commit.\n\ngit reset –hard\n\n\nReset a commit of current branch, also reset the Stage area but change nothing in Workspace\n\ngit reset [commit]\n\n\nReset the HEAD of current branch as a specific commit, also reset stage and workspace to keep the same as the commit.\n\ngit reset –hard [commit]\n\n\nRest current HEAD as a specific commit, but keep no changes in stage and workspace.\n\ngit reset –keep [commit]\n\n\nCreate a new commit, which is used to restore another commit. The changes of the later commit will be restored by the former one and will be applied to current branch.\n\ngit revert [commit]\n\n\nTemporally remove current uncommited changes and add them later\n\ngit stash\n\n\ngit stash pop\n\n\n\n\nCreate an archive file of a Git repository\n\ngit archive"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#create-a-repository",
    "href": "posts/2022-06-01-git-cheatsheet.html#create-a-repository",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Create a git repository in current directory \n\ngit init\n\nCreate a directory and initialize it as a git repository \n\ngit init [project-name]\n\nDownload a git repository \n\ngit clone [url]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#configuration",
    "href": "posts/2022-06-01-git-cheatsheet.html#configuration",
    "title": "Git cheatsheet",
    "section": "",
    "text": "The configuation file of Git is stored as .gitconfig. This file exits in the /home/USER/ as a configuration for global use, and also exists in repository folder as a configuration for specific use. \nDisplay current Git configuration settings\n\ngit config –list\n\nEdit the configuration file\n\ngit config -e [–global]\n\nSet up the user info\n\ngit config [–global] user.name “[name]”\ngit config [–global] user.email “[email address]”"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#addremove-file",
    "href": "posts/2022-06-01-git-cheatsheet.html#addremove-file",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Add specific file/files to stage areas\n\ngit add [file1] [file2] …\n\nAdd folder to stage areas\n\ngit add [dir]\n\nAdd all files in current folder to stage areas\n\ngit add .\n\nIf a file has multiple changes, it is okay to add every change individually\n\ngit add -p\n\nDelete a file in the workspace and save this deletion to stage areas\n\ngit rm [file1] [file2] …\n\nStop track the changes of a file, this file will stay in workspace\n\ngit rm –cached [file]\n\nChange file names, and save this rename action in stage areas\n\ngit mv [file-original] [file-renamed]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#submit-code",
    "href": "posts/2022-06-01-git-cheatsheet.html#submit-code",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Submit files in stage areas to repository\n\ngit commit -m [message]\n\nSubmit specific files from Stage to Repository\n\ngit commit [file1] [file2] … -m [message]\n\nDirectly submit all changes after previous submission from Workspace to Repository\n\ngit commit -a\n\nDisplay the difference info when submitting the code\n\ngit commit -v\n\nIf you want to change the commit message, you can use this code: (use only when no modification after previous commit):\n\ngit commit –amend -m [message]\n\nRe-commit last code, including the new changes of certain files.\n\ngit commit –amend [file1] [file2]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#branch",
    "href": "posts/2022-06-01-git-cheatsheet.html#branch",
    "title": "Git cheatsheet",
    "section": "",
    "text": "list all local branches\n\ngit branch\n\nlist all remote branches\n\ngti branch -r\n\nlist all local and remote brances\n\ngit branch -a\n\nCreate a new branch (local)\n\ngit branch [branch-name]\n\nCreate a new branch (local), and switch to this branch\n\ngit checkout -b [branch-name]\n\nCreate a new branch and direct to certain commit\n\ngit branch [branch-name] [commit]\n\nCreate a new branch and add track with remote branch\n\ngit branch –track branch [remote-branch]\n\nSwitch to specific branch and update workspace\n\ngit checkout [branch-name]\n\nSwitch to last branch\n\ngit checkout -\n\nBuild track connection between current branch and remote branch\n\ngit branch –set-upstream branch [remote-branch]\n\nMerge specific branch to current branch\n\ngit merge branch\n\nChoose a commit and merge to current branch\n\ngit cherry-pick [commit]\n\nDelete a branch\n\ngit branch -d [branch-name]\n\nDelete a remote branch\n\ngit push origin –delete [branch-name]\ngit branch -dr [remote/branch]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#tags",
    "href": "posts/2022-06-01-git-cheatsheet.html#tags",
    "title": "Git cheatsheet",
    "section": "",
    "text": "List all tags\n\ngit tag\n\nCreate a tage for current commit\n\ngit tag [tag]\n\nCreate a tag for specific commit\n\ngit tag [tag] [commit]\n\nDelete local tag\n\ngit tag -d [tag]\n\nDelete remote tag\n\ngit push origin :refs/tags/[tagName]\n\nShow tag infos\n\ngit show [tag]\n\nSubmit a specfic tag\n\ngit push [remote] [tag]\n\nSubmit all tags\n\ngit push [remote] –tags\n\nCreate a branch and direct to a specific tag\n\ngit checkout -b branch [tag]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#visualize-difference",
    "href": "posts/2022-06-01-git-cheatsheet.html#visualize-difference",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Display changed files\n\ngit status\n\nDisplay the history version of current branch\n\ngit log\n\nDisplay history of commits and changed files in every commit\n\ngit log –stat\n\nSearch commit history by keywords\n\ngit log -S [keyword]\n\nDisplay all changes afer a commit, and format displays as one commit per row.\n\ngit log [tag] HEAD –pretty=format:%s\n\n\nDisplay all changes of a specific commit, of whose commit message fits seach words.\n\ngit log [tag] HEAD –grep feature\n\nDisplay the version history of a file.\n\ngit log –follow [file]\ngit whatchanged [file]\n\nDisplay all differences of a file in every commit.\n\ngit log -p [file]\n\nShow last 5 commits info.\n\ngit log -5 –pretty –oneline\n\nShow users who add commits, ordered in frequency.\n\ngit shortlog -sn\n\nShow who and when changed a file.\n\ngit blame [file]\n\nShow the difference between workspace and stage.\n\ngit diff\n\nShow the difference between stage and last commit.\n\ngit diff –cached [file]\n\nShow the diffrence between workspace and the newest commit in current branch\n\ngit diff HEAD\n\nShow the difference between two commits\n\ngit diff [first-branch]…[second-branch]\n\nShow how many codes do you write today.\n\ngit diff –shortstat “@{0 day ago}”\n\nShow changes of a specific commit\n\ngit show [commit]\n\nShow file changes of a specific commit\n\ngit show –name-only [commit]\n\ngit show filename of a commit\n\ngit show [commit]:[filename]\n\nShow recent commits of current branch\n\ngit reflog"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#remote-sync",
    "href": "posts/2022-06-01-git-cheatsheet.html#remote-sync",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Download all changes from remote repository\n\ngit fetch [remote]\n\nDisplay all remote repository\n\ngit remote -v\n\nDisplay infomation of a remote repository\n\ngit remote show [remote]\n\nAdd a new remote repository and a name for the repository\n\ngit remote add [shortname] [url]\n\nPull the changes of the remote repository and merge it with local repository\n\ngit pull [remote] branch\n\nUpload local branch of the repository to remote repository\n\ngit push [remote] branch\n\nForce upload this current branch to remote repository ignoring conflicts.\n\ngit push [remote] –force\n\nPush all branches to remote repository\n\ngit push [remote] –all"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#restoration",
    "href": "posts/2022-06-01-git-cheatsheet.html#restoration",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Restore file from Stage area to Workspace\n\ngit checkout [file]\n\nRestore a file in a commit from Stage area to workspace\n\ngit checkout [commit] [file]\n\nRestore all files from Stage area to Workspace\n\ngit checkout .\n\nRestore a file from Stage and keep the file the same as last commit, but file in Workspace is unchanged\n\ngit reset [file]\n\nReset Stage area and Workspace to keep the same as last commit.\n\ngit reset –hard\n\n\nReset a commit of current branch, also reset the Stage area but change nothing in Workspace\n\ngit reset [commit]\n\n\nReset the HEAD of current branch as a specific commit, also reset stage and workspace to keep the same as the commit.\n\ngit reset –hard [commit]\n\n\nRest current HEAD as a specific commit, but keep no changes in stage and workspace.\n\ngit reset –keep [commit]\n\n\nCreate a new commit, which is used to restore another commit. The changes of the later commit will be restored by the former one and will be applied to current branch.\n\ngit revert [commit]\n\n\nTemporally remove current uncommited changes and add them later\n\ngit stash\n\n\ngit stash pop"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#others",
    "href": "posts/2022-06-01-git-cheatsheet.html#others",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Create an archive file of a Git repository\n\ngit archive"
  },
  {
    "objectID": "posts/2022-06-02-conda-env-setup.html",
    "href": "posts/2022-06-02-conda-env-setup.html",
    "title": "Conda cheatsheet",
    "section": "",
    "text": "conda environment is useful because you can build your own environment without meeting the situation some packages indepencies are conflict with those of another.\nFirst of all, you need to install Anaconda or Miniconda. please refer to this link, download the installer and install Anaconda or Miniconda."
  },
  {
    "objectID": "posts/2022-06-02-conda-env-setup.html#what-is-the-conda-environment",
    "href": "posts/2022-06-02-conda-env-setup.html#what-is-the-conda-environment",
    "title": "Conda cheatsheet",
    "section": "",
    "text": "conda environment is useful because you can build your own environment without meeting the situation some packages indepencies are conflict with those of another.\nFirst of all, you need to install Anaconda or Miniconda. please refer to this link, download the installer and install Anaconda or Miniconda."
  },
  {
    "objectID": "posts/2022-06-02-conda-env-setup.html#conda-commands",
    "href": "posts/2022-06-02-conda-env-setup.html#conda-commands",
    "title": "Conda cheatsheet",
    "section": "conda commands",
    "text": "conda commands\n\ncheck conda environment\n\nconda env list\n\n\n\nconda build a new environment\n\nconda create -c conda-forge your_env_name\n\n\n\nconda enter into or leave a specific environment\nEnter:\n\nconda activate your_env_name\n\nExit:\n\nsource deactivate\n\nor\n\nconda deactivate\n\n\n\nabout packages in the environment\nTo check all available packages:\n\nconda list\n\n\nconda list -n your_env_name\n\nTo check one package (e.g. rdkit) in your conda list\n\nconda list | grep rdkit\n\n\n\nexport environment as yml\n\n\nconda env export &gt; environment.yml\n\n\ncreate environment based on yml link:\n\nconda env create -f environment.yml\n\n\nupdate conda environment after making edits on yml file:\n\nconda env update -f environment.yml\n\n\n\nclone an environment\n\n\nconda create -n python36 –clone python36_new\n\n\n\nconda remove a specific environment\n\n\nconda remove -n your_env_name –all\n\n\nconda remove a package from a environment\n\nconda remove –name $your_env_name $package_name\n\n\n\nchange download source of conda\n\n\ncheck download resources\n\n\nconda config –set show_channel_urls yes\n\n\nadd download sources to conda config\n\n\nconda config –add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n\nAlso you will see the infomation in file ~/.condarc \npip download sources are changed by looking at the file: ~/.pip/pip.conf"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog posts",
    "section": "",
    "text": "Blog posts in the field of cheminformatics\n\n\n\n\n\n\n\nresources\n\n\n\n\nnice blogs to read\n\n\n\n\n\n\nMay 24, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMay 20, 2023\n\n\n\n\n\n\n  \n\n\n\n\nConda cheatsheet\n\n\n\n\n\n\n\ncheatsheet\n\n\n\n\nuseful conda commands\n\n\n\n\n\n\nJun 2, 2022\n\n\n\n\n\n\n  \n\n\n\n\nGit cheatsheet\n\n\n\n\n\n\n\ncheatsheet\n\n\n\n\nuseful git commands\n\n\n\n\n\n\nJun 1, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "draft/2023-05-28-rdkit-draw-tools/index.html",
    "href": "draft/2023-05-28-rdkit-draw-tools/index.html",
    "title": "Hightlight substructure in a reaction using RDKit",
    "section": "",
    "text": "Recently I am preparing reaction graphs to do a presentation. I find that it is easy to highlight substructure to a mol object, or highlight certain bond and atoms in a mol object. However, when it comes to draw reactions, these functions seems not working. So in this blog post, the main goal is to answer the question: how to highlight a substructure in a reaction graph using RDKit?\nLet’s first see the Draw functions and the reaction example will be used here:\n\nimport rdkit\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem\nfrom rdkit.Chem import Draw\nfrom rdkit.Chem.Draw import IPythonConsole\nIPythonConsole.ipython_useSVG=True\nprint(rdkit.__version__)\n\n2022.09.1\n\n\n\nrxn_smi = \"O=C(O)c1cccc2cnccc12.[N-]=[N+]=[N-]&gt;C(Cl)Cl.C(=O)(C(=O)Cl)Cl&gt;[N-]=[N+]=NC(=O)c1cccc2cnccc12\"\n\nrxn_smi_am = \"[cH:5]1[cH:6][c:7]2[cH:8][n:9][cH:10][cH:11][c:12]2[c:3]([cH:4]1)[C:2](=[O:1])O.[N-:13]=[N+:14]=[N-:15]&gt;C(Cl)Cl.C(=O)(C(=O)Cl)Cl&gt;[cH:5]1[cH:6][c:7]2[cH:8][n:9][cH:10][cH:11][c:12]2[c:3]([cH:4]1)[C:2](=[O:1])[N:13]=[N+:14]=[N-:15]\"\n\nOne way is to use the IPythonConsole fucntion, as long as it is a reaction mol object, there will reaction graph being rendered.\n\n\nAllChem.ReactionFromSmarts(rxn_smi, useSmiles = True)\n\n\n\n\nAnother way is to use the Draw.ReactionToImage() function, this will allows you to add more drawing options. You can modify the size of the image, or add drawOptions, or whether save it as a SVG or PNG files.\n\nrxn_mol = AllChem.ReactionFromSmarts(rxn_smi, useSmiles = True)\nDraw.ReactionToImage(rxn_mol, subImgSize=(200, 200), useSVG=False, drawOptions=None, returnPNG=False)\n\n\n\n\n\nAnother way to draw reactions is using ‘rdkit.Chem.Draw.rdMolDraw2D’ module.\n\nfrom rdkit.Chem import rdChemReactions\nfrom rdkit.Chem.Draw import rdMolDraw2D\n\n\ndef moveAtomMapsToNotes(m):\n    for at in m.GetAtoms():\n        if at.GetAtomMapNum():\n            at.SetProp(\"atomNote\",str(at.GetAtomMapNum()))\n\n\ndef draw_chemical_reaction(smiles, highlightByReactant=True, font_scale=1.0):\n    '''draw chemical reactions with atom mapping number'''\n    rxn = rdChemReactions.ReactionFromSmarts(smiles,useSmiles=True)\n    trxn = rdChemReactions.ChemicalReaction(rxn)\n    # move atom maps to be annotations:\n    for m in trxn.GetReactants():\n        moveAtomMapsToNotes(m)\n    for m in trxn.GetProducts():\n        moveAtomMapsToNotes(m)\n    d2d = rdMolDraw2D.MolDraw2DSVG(800,300)\n    d2d.drawOptions().annotationFontScale=font_scale\n    d2d.DrawReaction(trxn,highlightByReactant=highlightByReactant)\n\n    d2d.FinishDrawing()\n\n    return d2d.GetDrawingText()\n\n\nsvg = draw_chemical_reaction(rxn_smi_am)\n\n\nfrom IPython.display import SVG\ndisplay(SVG(svg.replace('svg:','')))\n\n\n\n\nLet’s try another way of drawing. I would like to highlight only one molecule in the reaction. Let’s see how we can do that.\n\nsmarts_query = \"[N-]=[N+]=[N-]\"\nsmarts = Chem.MolFromSmarts(smarts_query)\n\nsmiles = \"[N-]=[N+]=[N-]\"\nmol = Chem.MolFromSmiles(smiles)\n\nmol.GetSubstructMatch(smarts)\n\n\ndef draw_chemical_reaction(smiles, smarts_query, highlightByReactant=True, font_scale=1.0):\n    '''draw chemical reactions with atom mapping number'''\n    rxn = rdChemReactions.ReactionFromSmarts(smiles,useSmiles=True)\n    trxn = rdChemReactions.ChemicalReaction(rxn)\n    # move atom maps to be annotations:\n    for m in trxn.GetReactants():\n        moveAtomMapsToNotes(m)\n    for m in trxn.GetProducts():\n        moveAtomMapsToNotes(m)\n    d2d = rdMolDraw2D.MolDraw2DSVG(800,300)\n    d2d.drawOptions().annotationFontScale=font_scale\n    d2d.DrawReaction(trxn,highlightByReactant=highlightByReactant)\n\n    d2d.FinishDrawing()\n\n    return d2d.GetDrawingText()\n\n\ndef _legacyReactionToImage(rxn, subImgSize=(200, 200), **kwargs):\n  from PIL import Image\n\n  mols = []\n  for i in range(rxn.GetNumReactantTemplates()):\n    tmpl = rxn.GetReactantTemplate(i)\n    tmpl.UpdatePropertyCache(False)\n    mols.append(tmpl)\n  mols.append(None)\n  for i in range(rxn.GetNumProductTemplates()):\n    tmpl = rxn.GetProductTemplate(i)\n    tmpl.UpdatePropertyCache(False)\n    mols.append(tmpl)\n\n  res = Image.new(\"RGBA\", (subImgSize[0] * len(mols), subImgSize[1]), (255, 255, 255, 0))\n  for i, mol in enumerate(mols):\n    if mol is not None:\n      nimg = MolToImage(mol, subImgSize, kekulize=False, **kwargs)\n    else:\n      nimg, canvas = _createCanvas(subImgSize)\n      p0 = (10, subImgSize[1] // 2)\n      p1 = (subImgSize[0] - 10, subImgSize[1] // 2)\n      p3 = (subImgSize[0] - 20, subImgSize[1] // 2 - 10)\n      p4 = (subImgSize[0] - 20, subImgSize[1] // 2 + 10)\n      canvas.addCanvasLine(p0, p1, lineWidth=2, color=(0, 0, 0))\n      canvas.addCanvasLine(p3, p1, lineWidth=2, color=(0, 0, 0))\n      canvas.addCanvasLine(p4, p1, lineWidth=2, color=(0, 0, 0))\n      if hasattr(canvas, 'flush'):\n        canvas.flush()\n      else:\n        canvas.save()\n    res.paste(nimg, (i * subImgSize[0], 0))\n  return res\n\n\ndef ReactionToImage(rxn, subImgSize=(200, 200), useSVG=False, drawOptions=None, returnPNG=False,\n                    **kwargs):\n  if not useSVG and not hasattr(rdMolDraw2D, 'MolDraw2DCairo'):\n    return _legacyReactionToImage(rxn, subImgSize=subImgSize, **kwargs)\n  else:\n    width = subImgSize[0] * (rxn.GetNumReactantTemplates() + rxn.GetNumProductTemplates() + 1)\n    if useSVG:\n      d = rdMolDraw2D.MolDraw2DSVG(width, subImgSize[1])\n    else:\n      d = rdMolDraw2D.MolDraw2DCairo(width, subImgSize[1])\n    if drawOptions is not None:\n      d.SetDrawOptions(drawOptions)\n    d.DrawReaction(rxn, **kwargs)\n    d.FinishDrawing()\n    if useSVG or returnPNG:\n      return d.GetDrawingText()\n    else:\n      return _drawerToImage(d)"
  },
  {
    "objectID": "draft/example.html",
    "href": "draft/example.html",
    "title": "Yuru's blog posts",
    "section": "",
    "text": "from rdkit import Chem\nfrom rdkit.Chem import Draw\nfrom rdkit.Chem import rdChemReactions\nfrom rdkit.Chem.Draw import rdMolDraw2D\nfrom rdkit.Chem.Draw import IPythonConsole\nfrom IPython.display import SVG\nimport rdkit\nprint(rdkit.__version__)\n\n\n\nimport pickle\nimport gzip\nrxnData = []\nwith gzip.open('/home/glandrum/RDKit_blog/data/ChemReactionClassification/data/training_test_set_patent_data.pkl.gz') as inf:\n    while 1:\n        try: \n            d = pickle.load(inf)\n        except EOFError:\n            break\n        rxnData.append(d)\nlen(rxnData)\n\n\n\n\nrxnData[0]\n\n\n\nrxns = []\nfor rxn,patent,cls in rxnData:\n    rxn = rdChemReactions.ReactionFromSmarts(rxn,useSmiles=True)\n    rxn.RemoveUnmappedReactantTemplates()\n    rxns.append(rxn)\n    if len(rxns)&gt;=10:\n        break\nrxns[0]\n\n\ndef moveAtomMapsToNotes(m):\n    for at in m.GetAtoms():\n        if at.GetAtomMapNum():\n            at.SetProp(\"atomNote\",str(at.GetAtomMapNum()))\n            #at.SetAtomMapNum(0)\n    \ndef drawReactionWithoutAgents(rxn):\n    # get rid of agents to simplify things:\n    trxn = rdChemReactions.ChemicalReaction(rxn)\n    trxn.RemoveAgentTemplates()\n    # move atom maps to be annotations:\n    for m in trxn.GetReactants():\n        moveAtomMapsToNotes(m)\n    for m in trxn.GetProducts():\n        moveAtomMapsToNotes(m)\n        \n    d2d = rdMolDraw2D.MolDraw2DSVG(800,300)\n    d2d.DrawReaction(trxn,highlightByReactant=True)\n    d2d.FinishDrawing()\n    return d2d.GetDrawingText()\n\n\n\n\nSVG(drawReactionWithoutAgents(rxns[0]))\n\n\n\n\n\nSVG(drawReactionWithoutAgents(rxns[1]))\n\n\n\n\n\nSVG(drawReactionWithoutAgents(rxns[2]))\n\n\n\ndef transfer_mol_mapping(mapped_mol, unmapped_mol):\n    \"\"\"\n    Return unmapped_mol with molAtomMapNumber atom properties taken from mapped_mol\n    Mapped_mol must match unmapped_mol exactly by structure (ignoring hydrogens but \n    including general * groups), otherwise None is returned\n    Hydrogen atoms are removed from input mols and are ignored in processing\n    \"\"\"\n    def get_idx_to_map_num_mapping(mol):\n        return {a.GetIdx(): a.GetProp('molAtomMapNumber') for a in mol.GetAtoms()}\n    map_mol_idx_to_map_num = get_idx_to_map_num_mapping(mapped_mol)\n    qp = Chem.AdjustQueryParameters()\n    qp.makeDummiesQueries = True\n    qp.adjustDegree = True\n    qp.adjustDegreeFlags = Chem.ADJUST_IGNOREDUMMIES\n    mapped_mol = Chem.AdjustQueryProperties(mapped_mol, qp)\n    unmapped_mol = Chem.AdjustQueryProperties(unmapped_mol, qp)\n\n    matches = unmapped_mol.GetSubstructMatches(mapped_mol)\n    full_matches = [m for m in matches if len(m) == len(list(unmapped_mol.GetAtoms()))]\n    if len(full_matches) == 1:\n        # proceed normally with full match\n        match = full_matches[0]\n    elif len(matches) == 1:\n        # proceed normally with only match\n        match = matches[0]\n    elif len(matches) &gt; 1:\n        # for now, pick match randomly\n        print('PICKING RANDOM SUBSTRUCTURE MATCH')\n        match = matches[0]\n    else:\n        #print('Multiple substructure matches returned (and no complete one found): {}'.format(matches))\n        return None\n\n    for map_mol_idx, unmap_mol_idx in enumerate(match):\n        cur_a = unmapped_mol.GetAtomWithIdx(unmap_mol_idx)\n        cur_a.SetProp('molAtomMapNumber', map_mol_idx_to_map_num[map_mol_idx])\n    return unmapped_mol"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\nThe first idea of this blog is to put everything I find interesting or useful about Cheminformatics and Machine Learning here. Sometimes the topic will beyond what I just mentioned. Anyway, it just served as a place of notes for my personal usage. Hopefully it turns out nice and clean."
  }
]