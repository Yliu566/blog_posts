[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is my first post in a Quarto blog. Welcome!\n\nI am now starting to migrate from fastpages to quarto. Let’s see how everything goes here.\nLooking forward to using Quarto."
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html",
    "href": "posts/2022-06-01-git-cheatsheet.html",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Workspace  Index / Stage  Repository  Remote \n\n\nCreate a git repository in current directory \n\ngit init\n\nCreate a directory and initialize it as a git repository \n\ngit init [project-name]\n\nDownload a git repository \n\ngit clone [url]\n\n\n\n\nThe configuation file of Git is stored as .gitconfig. This file exits in the /home/USER/ as a configuration for global use, and also exists in repository folder as a configuration for specific use. \nDisplay current Git configuration settings\n\ngit config –list\n\nEdit the configuration file\n\ngit config -e [–global]\n\nSet up the user info\n\ngit config [–global] user.name “[name]”\ngit config [–global] user.email “[email address]”\n\n\n\n\nAdd specific file/files to stage areas\n\ngit add [file1] [file2] …\n\nAdd folder to stage areas\n\ngit add [dir]\n\nAdd all files in current folder to stage areas\n\ngit add .\n\nIf a file has multiple changes, it is okay to add every change individually\n\ngit add -p\n\nDelete a file in the workspace and save this deletion to stage areas\n\ngit rm [file1] [file2] …\n\nStop track the changes of a file, this file will stay in workspace\n\ngit rm –cached [file]\n\nChange file names, and save this rename action in stage areas\n\ngit mv [file-original] [file-renamed]\n\n\n\n\nSubmit files in stage areas to repository\n\ngit commit -m [message]\n\nSubmit specific files from Stage to Repository\n\ngit commit [file1] [file2] … -m [message]\n\nDirectly submit all changes after previous submission from Workspace to Repository\n\ngit commit -a\n\nDisplay the difference info when submitting the code\n\ngit commit -v\n\nIf you want to change the commit message, you can use this code: (use only when no modification after previous commit):\n\ngit commit –amend -m [message]\n\nRe-commit last code, including the new changes of certain files.\n\ngit commit –amend [file1] [file2]\n\n\n\n\nlist all local branches\n\ngit branch\n\nlist all remote branches\n\ngti branch -r\n\nlist all local and remote brances\n\ngit branch -a\n\nCreate a new branch (local)\n\ngit branch [branch-name]\n\nCreate a new branch (local), and switch to this branch\n\ngit checkout -b [branch-name]\n\nCreate a new branch and direct to certain commit\n\ngit branch [branch-name] [commit]\n\nCreate a new branch and add track with remote branch\n\ngit branch –track branch [remote-branch]\n\nSwitch to specific branch and update workspace\n\ngit checkout [branch-name]\n\nSwitch to last branch\n\ngit checkout -\n\nBuild track connection between current branch and remote branch\n\ngit branch –set-upstream branch [remote-branch]\n\nMerge specific branch to current branch\n\ngit merge branch\n\nChoose a commit and merge to current branch\n\ngit cherry-pick [commit]\n\nDelete a branch\n\ngit branch -d [branch-name]\n\nDelete a remote branch\n\ngit push origin –delete [branch-name]\ngit branch -dr [remote/branch]\n\n\n\n\nList all tags\n\ngit tag\n\nCreate a tage for current commit\n\ngit tag [tag]\n\nCreate a tag for specific commit\n\ngit tag [tag] [commit]\n\nDelete local tag\n\ngit tag -d [tag]\n\nDelete remote tag\n\ngit push origin :refs/tags/[tagName]\n\nShow tag infos\n\ngit show [tag]\n\nSubmit a specfic tag\n\ngit push [remote] [tag]\n\nSubmit all tags\n\ngit push [remote] –tags\n\nCreate a branch and direct to a specific tag\n\ngit checkout -b branch [tag]\n\n\n\n\nDisplay changed files\n\ngit status\n\nDisplay the history version of current branch\n\ngit log\n\nDisplay history of commits and changed files in every commit\n\ngit log –stat\n\nSearch commit history by keywords\n\ngit log -S [keyword]\n\nDisplay all changes afer a commit, and format displays as one commit per row.\n\ngit log [tag] HEAD –pretty=format:%s\n\n\nDisplay all changes of a specific commit, of whose commit message fits seach words.\n\ngit log [tag] HEAD –grep feature\n\nDisplay the version history of a file.\n\ngit log –follow [file]\ngit whatchanged [file]\n\nDisplay all differences of a file in every commit.\n\ngit log -p [file]\n\nShow last 5 commits info.\n\ngit log -5 –pretty –oneline\n\nShow users who add commits, ordered in frequency.\n\ngit shortlog -sn\n\nShow who and when changed a file.\n\ngit blame [file]\n\nShow the difference between workspace and stage.\n\ngit diff\n\nShow the difference between stage and last commit.\n\ngit diff –cached [file]\n\nShow the diffrence between workspace and the newest commit in current branch\n\ngit diff HEAD\n\nShow the difference between two commits\n\ngit diff [first-branch]…[second-branch]\n\nShow how many codes do you write today.\n\ngit diff –shortstat “@{0 day ago}”\n\nShow changes of a specific commit\n\ngit show [commit]\n\nShow file changes of a specific commit\n\ngit show –name-only [commit]\n\ngit show filename of a commit\n\ngit show [commit]:[filename]\n\nShow recent commits of current branch\n\ngit reflog\n\n\n\n\nDownload all changes from remote repository\n\ngit fetch [remote]\n\nDisplay all remote repository\n\ngit remote -v\n\nDisplay infomation of a remote repository\n\ngit remote show [remote]\n\nAdd a new remote repository and a name for the repository\n\ngit remote add [shortname] [url]\n\nPull the changes of the remote repository and merge it with local repository\n\ngit pull [remote] branch\n\nUpload local branch of the repository to remote repository\n\ngit push [remote] branch\n\nForce upload this current branch to remote repository ignoring conflicts.\n\ngit push [remote] –force\n\nPush all branches to remote repository\n\ngit push [remote] –all\n\n\n\n\nRestore file from Stage area to Workspace\n\ngit checkout [file]\n\nRestore a file in a commit from Stage area to workspace\n\ngit checkout [commit] [file]\n\nRestore all files from Stage area to Workspace\n\ngit checkout .\n\nRestore a file from Stage and keep the file the same as last commit, but file in Workspace is unchanged\n\ngit reset [file]\n\nReset Stage area and Workspace to keep the same as last commit.\n\ngit reset –hard\n\n\nReset a commit of current branch, also reset the Stage area but change nothing in Workspace\n\ngit reset [commit]\n\n\nReset the HEAD of current branch as a specific commit, also reset stage and workspace to keep the same as the commit.\n\ngit reset –hard [commit]\n\n\nRest current HEAD as a specific commit, but keep no changes in stage and workspace.\n\ngit reset –keep [commit]\n\n\nCreate a new commit, which is used to restore another commit. The changes of the later commit will be restored by the former one and will be applied to current branch.\n\ngit revert [commit]\n\n\nTemporally remove current uncommited changes and add them later\n\ngit stash\n\n\ngit stash pop\n\n\n\n\nCreate an archive file of a Git repository\n\ngit archive"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#create-a-repository",
    "href": "posts/2022-06-01-git-cheatsheet.html#create-a-repository",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Create a git repository in current directory \n\ngit init\n\nCreate a directory and initialize it as a git repository \n\ngit init [project-name]\n\nDownload a git repository \n\ngit clone [url]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#configuration",
    "href": "posts/2022-06-01-git-cheatsheet.html#configuration",
    "title": "Git cheatsheet",
    "section": "",
    "text": "The configuation file of Git is stored as .gitconfig. This file exits in the /home/USER/ as a configuration for global use, and also exists in repository folder as a configuration for specific use. \nDisplay current Git configuration settings\n\ngit config –list\n\nEdit the configuration file\n\ngit config -e [–global]\n\nSet up the user info\n\ngit config [–global] user.name “[name]”\ngit config [–global] user.email “[email address]”"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#addremove-file",
    "href": "posts/2022-06-01-git-cheatsheet.html#addremove-file",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Add specific file/files to stage areas\n\ngit add [file1] [file2] …\n\nAdd folder to stage areas\n\ngit add [dir]\n\nAdd all files in current folder to stage areas\n\ngit add .\n\nIf a file has multiple changes, it is okay to add every change individually\n\ngit add -p\n\nDelete a file in the workspace and save this deletion to stage areas\n\ngit rm [file1] [file2] …\n\nStop track the changes of a file, this file will stay in workspace\n\ngit rm –cached [file]\n\nChange file names, and save this rename action in stage areas\n\ngit mv [file-original] [file-renamed]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#submit-code",
    "href": "posts/2022-06-01-git-cheatsheet.html#submit-code",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Submit files in stage areas to repository\n\ngit commit -m [message]\n\nSubmit specific files from Stage to Repository\n\ngit commit [file1] [file2] … -m [message]\n\nDirectly submit all changes after previous submission from Workspace to Repository\n\ngit commit -a\n\nDisplay the difference info when submitting the code\n\ngit commit -v\n\nIf you want to change the commit message, you can use this code: (use only when no modification after previous commit):\n\ngit commit –amend -m [message]\n\nRe-commit last code, including the new changes of certain files.\n\ngit commit –amend [file1] [file2]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#branch",
    "href": "posts/2022-06-01-git-cheatsheet.html#branch",
    "title": "Git cheatsheet",
    "section": "",
    "text": "list all local branches\n\ngit branch\n\nlist all remote branches\n\ngti branch -r\n\nlist all local and remote brances\n\ngit branch -a\n\nCreate a new branch (local)\n\ngit branch [branch-name]\n\nCreate a new branch (local), and switch to this branch\n\ngit checkout -b [branch-name]\n\nCreate a new branch and direct to certain commit\n\ngit branch [branch-name] [commit]\n\nCreate a new branch and add track with remote branch\n\ngit branch –track branch [remote-branch]\n\nSwitch to specific branch and update workspace\n\ngit checkout [branch-name]\n\nSwitch to last branch\n\ngit checkout -\n\nBuild track connection between current branch and remote branch\n\ngit branch –set-upstream branch [remote-branch]\n\nMerge specific branch to current branch\n\ngit merge branch\n\nChoose a commit and merge to current branch\n\ngit cherry-pick [commit]\n\nDelete a branch\n\ngit branch -d [branch-name]\n\nDelete a remote branch\n\ngit push origin –delete [branch-name]\ngit branch -dr [remote/branch]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#tags",
    "href": "posts/2022-06-01-git-cheatsheet.html#tags",
    "title": "Git cheatsheet",
    "section": "",
    "text": "List all tags\n\ngit tag\n\nCreate a tage for current commit\n\ngit tag [tag]\n\nCreate a tag for specific commit\n\ngit tag [tag] [commit]\n\nDelete local tag\n\ngit tag -d [tag]\n\nDelete remote tag\n\ngit push origin :refs/tags/[tagName]\n\nShow tag infos\n\ngit show [tag]\n\nSubmit a specfic tag\n\ngit push [remote] [tag]\n\nSubmit all tags\n\ngit push [remote] –tags\n\nCreate a branch and direct to a specific tag\n\ngit checkout -b branch [tag]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#visualize-difference",
    "href": "posts/2022-06-01-git-cheatsheet.html#visualize-difference",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Display changed files\n\ngit status\n\nDisplay the history version of current branch\n\ngit log\n\nDisplay history of commits and changed files in every commit\n\ngit log –stat\n\nSearch commit history by keywords\n\ngit log -S [keyword]\n\nDisplay all changes afer a commit, and format displays as one commit per row.\n\ngit log [tag] HEAD –pretty=format:%s\n\n\nDisplay all changes of a specific commit, of whose commit message fits seach words.\n\ngit log [tag] HEAD –grep feature\n\nDisplay the version history of a file.\n\ngit log –follow [file]\ngit whatchanged [file]\n\nDisplay all differences of a file in every commit.\n\ngit log -p [file]\n\nShow last 5 commits info.\n\ngit log -5 –pretty –oneline\n\nShow users who add commits, ordered in frequency.\n\ngit shortlog -sn\n\nShow who and when changed a file.\n\ngit blame [file]\n\nShow the difference between workspace and stage.\n\ngit diff\n\nShow the difference between stage and last commit.\n\ngit diff –cached [file]\n\nShow the diffrence between workspace and the newest commit in current branch\n\ngit diff HEAD\n\nShow the difference between two commits\n\ngit diff [first-branch]…[second-branch]\n\nShow how many codes do you write today.\n\ngit diff –shortstat “@{0 day ago}”\n\nShow changes of a specific commit\n\ngit show [commit]\n\nShow file changes of a specific commit\n\ngit show –name-only [commit]\n\ngit show filename of a commit\n\ngit show [commit]:[filename]\n\nShow recent commits of current branch\n\ngit reflog"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#remote-sync",
    "href": "posts/2022-06-01-git-cheatsheet.html#remote-sync",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Download all changes from remote repository\n\ngit fetch [remote]\n\nDisplay all remote repository\n\ngit remote -v\n\nDisplay infomation of a remote repository\n\ngit remote show [remote]\n\nAdd a new remote repository and a name for the repository\n\ngit remote add [shortname] [url]\n\nPull the changes of the remote repository and merge it with local repository\n\ngit pull [remote] branch\n\nUpload local branch of the repository to remote repository\n\ngit push [remote] branch\n\nForce upload this current branch to remote repository ignoring conflicts.\n\ngit push [remote] –force\n\nPush all branches to remote repository\n\ngit push [remote] –all"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#restoration",
    "href": "posts/2022-06-01-git-cheatsheet.html#restoration",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Restore file from Stage area to Workspace\n\ngit checkout [file]\n\nRestore a file in a commit from Stage area to workspace\n\ngit checkout [commit] [file]\n\nRestore all files from Stage area to Workspace\n\ngit checkout .\n\nRestore a file from Stage and keep the file the same as last commit, but file in Workspace is unchanged\n\ngit reset [file]\n\nReset Stage area and Workspace to keep the same as last commit.\n\ngit reset –hard\n\n\nReset a commit of current branch, also reset the Stage area but change nothing in Workspace\n\ngit reset [commit]\n\n\nReset the HEAD of current branch as a specific commit, also reset stage and workspace to keep the same as the commit.\n\ngit reset –hard [commit]\n\n\nRest current HEAD as a specific commit, but keep no changes in stage and workspace.\n\ngit reset –keep [commit]\n\n\nCreate a new commit, which is used to restore another commit. The changes of the later commit will be restored by the former one and will be applied to current branch.\n\ngit revert [commit]\n\n\nTemporally remove current uncommited changes and add them later\n\ngit stash\n\n\ngit stash pop"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#others",
    "href": "posts/2022-06-01-git-cheatsheet.html#others",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Create an archive file of a Git repository\n\ngit archive"
  },
  {
    "objectID": "posts/2022-06-02-conda-env-setup.html",
    "href": "posts/2022-06-02-conda-env-setup.html",
    "title": "Use anaconda to setup an environment",
    "section": "",
    "text": "conda environment is useful because you can build your own environment without meeting the situation some packages indepencies are conflict with those of another.\nFirst of all, you need to install Anaconda or Miniconda. please refer to this link, download the installer and install Anaconda or Miniconda."
  },
  {
    "objectID": "posts/2022-06-02-conda-env-setup.html#what-is-the-conda-environment",
    "href": "posts/2022-06-02-conda-env-setup.html#what-is-the-conda-environment",
    "title": "Use anaconda to setup an environment",
    "section": "",
    "text": "conda environment is useful because you can build your own environment without meeting the situation some packages indepencies are conflict with those of another.\nFirst of all, you need to install Anaconda or Miniconda. please refer to this link, download the installer and install Anaconda or Miniconda."
  },
  {
    "objectID": "posts/2022-06-02-conda-env-setup.html#conda-commands",
    "href": "posts/2022-06-02-conda-env-setup.html#conda-commands",
    "title": "Use anaconda to setup an environment",
    "section": "conda commands",
    "text": "conda commands\n\ncheck conda environment\n\nconda env list\n\n\n\nconda build a new environment\n\nconda create -c conda-forge your_env_name\n\n\n\nconda enter into or leave a specific environment\nEnter:\n\nconda activate your_env_name\n\nExit:\n\nsource deactivate\n\nor\n\nconda deactivate\n\n\n\nabout packages in the environment\nTo check all available packages:\n\nconda list\n\n\nconda list -n your_env_name\n\nTo check one package (e.g. rdkit) in your conda list\n\nconda list | grep rdkit\n\n\n\nexport environment as yml\n\n\nconda env export &gt; environment.yml\n\n\ncreate environment based on yml link:\n\nconda env create -f environment.yml\n\n\nupdate conda environment after making edits on yml file:\n\nconda env update -f environment.yml\n\n\n\nclone an environment\n\n\nconda create -n python36 –clone python36_new\n\n\n\nconda remove a specific environment\n\n\nconda remove -n your_env_name –all\n\n\nconda remove a package from a environment\n\nconda remove –name $your_env_name $package_name\n\n\n\nchange download source of conda\n\n\ncheck download resources\n\n\nconda config –set show_channel_urls yes\n\n\nadd download sources to conda config\n\n\nconda config –add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n\nAlso you will see the infomation in file ~/.condarc \npip download sources are changed by looking at the file: ~/.pip/pip.conf"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog posts",
    "section": "",
    "text": "Welcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMay 20, 2023\n\n\n\n\n\n\n  \n\n\n\n\nUse anaconda to setup an environment\n\n\n\n\n\n\n\ncheatsheet\n\n\n\n\nThis page tells you what is a conda environment and how to build or remove specific conda environment.\n\n\n\n\n\n\nJun 2, 2022\n\n\n\n\n\n\n  \n\n\n\n\nGit cheatsheet\n\n\n\n\n\n\n\ncheatsheet\n\n\n\n\nUseful git commands\n\n\n\n\n\n\nJun 1, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\nThis site is previoius built with fastpages, now is built with quarto.\nThe first idea of this blog is to put everything I find interesting or useful about Cheminformatics and Machine Learning here. Sometimes the topic will beyond what I just mentioned. Anyway, it just served as a place of notes for my personal usage. Hopefully it turns out nice and clean."
  }
]