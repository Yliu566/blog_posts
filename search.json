[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is my first post in a Quarto blog. Welcome!\n\nI am now starting to migrate from fastpages to quarto. Let’s see how everything goes here.\nLooking forward to using Quarto."
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html",
    "href": "posts/2022-06-01-git-cheatsheet.html",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Workspace  Index / Stage  Repository  Remote \n\n\nCreate a git repository in current directory  &gt; git init\nCreate a directory and initialize it as a git repository  &gt; git init [project-name]\nDownload a git repository  &gt; git clone [url]\n\n\n\nThe configuation file of Git is stored as .gitconfig. This file exits in the /home/USER/ as a configuration for global use, and also exists in repository folder as a configuration for specific use. \nDisplay current Git configuration settings &gt; git config –list\nEdit the configuration file &gt; git config -e [–global]\nSet up the user info &gt; git config [–global] user.name “[name]” &gt; git config [–global] user.email “[email address]”\n\n\n\nAdd specific file/files to stage areas &gt; git add [file1] [file2] …\nAdd folder to stage areas &gt; git add [dir]\nAdd all files in current folder to stage areas &gt; git add .\nIf a file has multiple changes, it is okay to add every change individually &gt; git add -p\nDelete a file in the workspace and save this deletion to stage areas &gt; git rm [file1] [file2] …\nStop track the changes of a file, this file will stay in workspace &gt; git rm –cached [file]\nChange file names, and save this rename action in stage areas &gt; git mv [file-original] [file-renamed]\n\n\n\nSubmit files in stage areas to repository &gt; git commit -m [message]\nSubmit specific files from Stage to Repository &gt; git commit [file1] [file2] … -m [message]\nDirectly submit all changes after previous submission from Workspace to Repository &gt; git commit -a\nDisplay the difference info when submitting the code &gt; git commit -v\nIf you want to change the commit message, you can use this code: (use only when no modification after previous commit): &gt; git commit –amend -m [message]\nRe-commit last code, including the new changes of certain files. &gt; git commit –amend [file1] [file2]\n\n\n\nlist all local branches &gt; git branch\nlist all remote branches &gt; gti branch -r\nlist all local and remote brances &gt; git branch -a\nCreate a new branch (local) &gt; git branch [branch-name]\nCreate a new branch (local), and switch to this branch &gt; git checkout -b [branch-name]\nCreate a new branch and direct to certain commit &gt; git branch [branch-name] [commit]\nCreate a new branch and add track with remote branch &gt; git branch –track branch [remote-branch]\nSwitch to specific branch and update workspace &gt; git checkout [branch-name]\nSwitch to last branch &gt; git checkout -\nBuild track connection between current branch and remote branch &gt; git branch –set-upstream branch [remote-branch]\nMerge specific branch to current branch &gt; git merge branch\nChoose a commit and merge to current branch &gt; git cherry-pick [commit]\nDelete a branch &gt; git branch -d [branch-name]\nDelete a remote branch &gt; git push origin –delete [branch-name] &gt; git branch -dr [remote/branch]\n\n\n\nList all tags &gt; git tag\nCreate a tage for current commit &gt; git tag [tag]\nCreate a tag for specific commit &gt; git tag [tag] [commit]\nDelete local tag &gt; git tag -d [tag]\nDelete remote tag &gt; git push origin :refs/tags/[tagName]\nShow tag infos &gt; git show [tag]\nSubmit a specfic tag &gt; git push [remote] [tag]\nSubmit all tags &gt; git push [remote] –tags\nCreate a branch and direct to a specific tag &gt; git checkout -b branch [tag]\n\n\n\nDisplay changed files &gt; git status\nDisplay the history version of current branch &gt; git log\nDisplay history of commits and changed files in every commit &gt; git log –stat\nSearch commit history by keywords &gt; git log -S [keyword]\nDisplay all changes afer a commit, and format displays as one commit per row. &gt; git log [tag] HEAD –pretty=format:%s\n\nDisplay all changes of a specific commit, of whose commit message fits seach words. &gt; git log [tag] HEAD –grep feature\nDisplay the version history of a file. &gt; git log –follow [file] &gt; git whatchanged [file]\nDisplay all differences of a file in every commit. &gt; git log -p [file]\nShow last 5 commits info. &gt; git log -5 –pretty –oneline\nShow users who add commits, ordered in frequency. &gt; git shortlog -sn\nShow who and when changed a file. &gt; git blame [file]\nShow the difference between workspace and stage. &gt; git diff\nShow the difference between stage and last commit. &gt; git diff –cached [file]\nShow the diffrence between workspace and the newest commit in current branch &gt; git diff HEAD\nShow the difference between two commits &gt; git diff [first-branch]…[second-branch]\nShow how many codes do you write today. &gt; git diff –shortstat “@{0 day ago}”\nShow changes of a specific commit &gt; git show [commit]\nShow file changes of a specific commit &gt; git show –name-only [commit]\ngit show filename of a commit &gt; git show [commit]:[filename]\nShow recent commits of current branch &gt; git reflog\n\n\n\nDownload all changes from remote repository &gt; git fetch [remote]\nDisplay all remote repository &gt; git remote -v\nDisplay infomation of a remote repository &gt; git remote show [remote]\nAdd a new remote repository and a name for the repository &gt; git remote add [shortname] [url]\nPull the changes of the remote repository and merge it with local repository &gt; git pull [remote] branch\nUpload local branch of the repository to remote repository &gt; git push [remote] branch\nForce upload this current branch to remote repository ignoring conflicts. &gt; git push [remote] –force\nPush all branches to remote repository &gt; git push [remote] –all\n\n\n\nRestore file from Stage area to Workspace &gt; git checkout [file]\nRestore a file in a commit from Stage area to workspace &gt; git checkout [commit] [file]\nRestore all files from Stage area to Workspace &gt; git checkout .\nRestore a file from Stage and keep the file the same as last commit, but file in Workspace is unchanged &gt; git reset [file]\nReset Stage area and Workspace to keep the same as last commit. &gt; git reset –hard\n\nReset a commit of current branch, also reset the Stage area but change nothing in Workspace &gt; git reset [commit]\n\nReset the HEAD of current branch as a specific commit, also reset stage and workspace to keep the same as the commit. &gt; git reset –hard [commit]\n\nRest current HEAD as a specific commit, but keep no changes in stage and workspace. &gt; git reset –keep [commit]\n\nCreate a new commit, which is used to restore another commit. The changes of the later commit will be restored by the former one and will be applied to current branch. &gt; git revert [commit]\n\nTemporally remove current uncommited changes and add them later &gt; git stash &gt; git stash pop\n\n\n\nCreate an archive file of a Git repository &gt; git archive"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#create-a-repository",
    "href": "posts/2022-06-01-git-cheatsheet.html#create-a-repository",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Create a git repository in current directory  &gt; git init\nCreate a directory and initialize it as a git repository  &gt; git init [project-name]\nDownload a git repository  &gt; git clone [url]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#configuration",
    "href": "posts/2022-06-01-git-cheatsheet.html#configuration",
    "title": "Git cheatsheet",
    "section": "",
    "text": "The configuation file of Git is stored as .gitconfig. This file exits in the /home/USER/ as a configuration for global use, and also exists in repository folder as a configuration for specific use. \nDisplay current Git configuration settings &gt; git config –list\nEdit the configuration file &gt; git config -e [–global]\nSet up the user info &gt; git config [–global] user.name “[name]” &gt; git config [–global] user.email “[email address]”"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#addremove-file",
    "href": "posts/2022-06-01-git-cheatsheet.html#addremove-file",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Add specific file/files to stage areas &gt; git add [file1] [file2] …\nAdd folder to stage areas &gt; git add [dir]\nAdd all files in current folder to stage areas &gt; git add .\nIf a file has multiple changes, it is okay to add every change individually &gt; git add -p\nDelete a file in the workspace and save this deletion to stage areas &gt; git rm [file1] [file2] …\nStop track the changes of a file, this file will stay in workspace &gt; git rm –cached [file]\nChange file names, and save this rename action in stage areas &gt; git mv [file-original] [file-renamed]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#submit-code",
    "href": "posts/2022-06-01-git-cheatsheet.html#submit-code",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Submit files in stage areas to repository &gt; git commit -m [message]\nSubmit specific files from Stage to Repository &gt; git commit [file1] [file2] … -m [message]\nDirectly submit all changes after previous submission from Workspace to Repository &gt; git commit -a\nDisplay the difference info when submitting the code &gt; git commit -v\nIf you want to change the commit message, you can use this code: (use only when no modification after previous commit): &gt; git commit –amend -m [message]\nRe-commit last code, including the new changes of certain files. &gt; git commit –amend [file1] [file2]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#branch",
    "href": "posts/2022-06-01-git-cheatsheet.html#branch",
    "title": "Git cheatsheet",
    "section": "",
    "text": "list all local branches &gt; git branch\nlist all remote branches &gt; gti branch -r\nlist all local and remote brances &gt; git branch -a\nCreate a new branch (local) &gt; git branch [branch-name]\nCreate a new branch (local), and switch to this branch &gt; git checkout -b [branch-name]\nCreate a new branch and direct to certain commit &gt; git branch [branch-name] [commit]\nCreate a new branch and add track with remote branch &gt; git branch –track branch [remote-branch]\nSwitch to specific branch and update workspace &gt; git checkout [branch-name]\nSwitch to last branch &gt; git checkout -\nBuild track connection between current branch and remote branch &gt; git branch –set-upstream branch [remote-branch]\nMerge specific branch to current branch &gt; git merge branch\nChoose a commit and merge to current branch &gt; git cherry-pick [commit]\nDelete a branch &gt; git branch -d [branch-name]\nDelete a remote branch &gt; git push origin –delete [branch-name] &gt; git branch -dr [remote/branch]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#tags",
    "href": "posts/2022-06-01-git-cheatsheet.html#tags",
    "title": "Git cheatsheet",
    "section": "",
    "text": "List all tags &gt; git tag\nCreate a tage for current commit &gt; git tag [tag]\nCreate a tag for specific commit &gt; git tag [tag] [commit]\nDelete local tag &gt; git tag -d [tag]\nDelete remote tag &gt; git push origin :refs/tags/[tagName]\nShow tag infos &gt; git show [tag]\nSubmit a specfic tag &gt; git push [remote] [tag]\nSubmit all tags &gt; git push [remote] –tags\nCreate a branch and direct to a specific tag &gt; git checkout -b branch [tag]"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#visualize-difference",
    "href": "posts/2022-06-01-git-cheatsheet.html#visualize-difference",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Display changed files &gt; git status\nDisplay the history version of current branch &gt; git log\nDisplay history of commits and changed files in every commit &gt; git log –stat\nSearch commit history by keywords &gt; git log -S [keyword]\nDisplay all changes afer a commit, and format displays as one commit per row. &gt; git log [tag] HEAD –pretty=format:%s\n\nDisplay all changes of a specific commit, of whose commit message fits seach words. &gt; git log [tag] HEAD –grep feature\nDisplay the version history of a file. &gt; git log –follow [file] &gt; git whatchanged [file]\nDisplay all differences of a file in every commit. &gt; git log -p [file]\nShow last 5 commits info. &gt; git log -5 –pretty –oneline\nShow users who add commits, ordered in frequency. &gt; git shortlog -sn\nShow who and when changed a file. &gt; git blame [file]\nShow the difference between workspace and stage. &gt; git diff\nShow the difference between stage and last commit. &gt; git diff –cached [file]\nShow the diffrence between workspace and the newest commit in current branch &gt; git diff HEAD\nShow the difference between two commits &gt; git diff [first-branch]…[second-branch]\nShow how many codes do you write today. &gt; git diff –shortstat “@{0 day ago}”\nShow changes of a specific commit &gt; git show [commit]\nShow file changes of a specific commit &gt; git show –name-only [commit]\ngit show filename of a commit &gt; git show [commit]:[filename]\nShow recent commits of current branch &gt; git reflog"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#remote-sync",
    "href": "posts/2022-06-01-git-cheatsheet.html#remote-sync",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Download all changes from remote repository &gt; git fetch [remote]\nDisplay all remote repository &gt; git remote -v\nDisplay infomation of a remote repository &gt; git remote show [remote]\nAdd a new remote repository and a name for the repository &gt; git remote add [shortname] [url]\nPull the changes of the remote repository and merge it with local repository &gt; git pull [remote] branch\nUpload local branch of the repository to remote repository &gt; git push [remote] branch\nForce upload this current branch to remote repository ignoring conflicts. &gt; git push [remote] –force\nPush all branches to remote repository &gt; git push [remote] –all"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#restoration",
    "href": "posts/2022-06-01-git-cheatsheet.html#restoration",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Restore file from Stage area to Workspace &gt; git checkout [file]\nRestore a file in a commit from Stage area to workspace &gt; git checkout [commit] [file]\nRestore all files from Stage area to Workspace &gt; git checkout .\nRestore a file from Stage and keep the file the same as last commit, but file in Workspace is unchanged &gt; git reset [file]\nReset Stage area and Workspace to keep the same as last commit. &gt; git reset –hard\n\nReset a commit of current branch, also reset the Stage area but change nothing in Workspace &gt; git reset [commit]\n\nReset the HEAD of current branch as a specific commit, also reset stage and workspace to keep the same as the commit. &gt; git reset –hard [commit]\n\nRest current HEAD as a specific commit, but keep no changes in stage and workspace. &gt; git reset –keep [commit]\n\nCreate a new commit, which is used to restore another commit. The changes of the later commit will be restored by the former one and will be applied to current branch. &gt; git revert [commit]\n\nTemporally remove current uncommited changes and add them later &gt; git stash &gt; git stash pop"
  },
  {
    "objectID": "posts/2022-06-01-git-cheatsheet.html#others",
    "href": "posts/2022-06-01-git-cheatsheet.html#others",
    "title": "Git cheatsheet",
    "section": "",
    "text": "Create an archive file of a Git repository &gt; git archive"
  },
  {
    "objectID": "posts/2022-06-02-conda-env-setup.html",
    "href": "posts/2022-06-02-conda-env-setup.html",
    "title": "Use anaconda to setup an environment",
    "section": "",
    "text": "conda environment is useful because you can build your own environment without meeting the situation some packages indepencies are conflict with those of another.\nFirst of all, you need to install Anaconda or Miniconda. please refer to this link, download the installer and install Anaconda or Miniconda."
  },
  {
    "objectID": "posts/2022-06-02-conda-env-setup.html#what-is-the-conda-environment",
    "href": "posts/2022-06-02-conda-env-setup.html#what-is-the-conda-environment",
    "title": "Use anaconda to setup an environment",
    "section": "",
    "text": "conda environment is useful because you can build your own environment without meeting the situation some packages indepencies are conflict with those of another.\nFirst of all, you need to install Anaconda or Miniconda. please refer to this link, download the installer and install Anaconda or Miniconda."
  },
  {
    "objectID": "posts/2022-06-02-conda-env-setup.html#conda-commands",
    "href": "posts/2022-06-02-conda-env-setup.html#conda-commands",
    "title": "Use anaconda to setup an environment",
    "section": "conda commands",
    "text": "conda commands\n\ncheck conda environment\n\nconda env list\n\n\n\nconda build a new environment\n\nconda create -c conda-forge your_env_name\n\n\n\nconda enter into or leave a specific environment\nEnter: &gt; conda activate your_env_name\nExit: &gt; source deactivate\nor &gt; conda deactivate\n\n\nabout packages in the environment\nTo check all available packages: &gt; conda list\n\nconda list -n your_env_name\n\nTo check one package (e.g. rdkit) in your conda list &gt; conda list | grep rdkit\n\n\nexport environment as yml\n\n\nconda env export &gt; environment.yml\n\n\ncreate environment based on yml link:\n\nconda env create -f environment.yml\n\n\nupdate conda environment after making edits on yml file: &gt; conda env update -f environment.yml\n\n\nclone an environment\n\n\nconda create -n python36 –clone python36_new\n\n\n\nconda remove a specific environment\n\n\nconda remove -n your_env_name –all\n\n\nconda remove a package from a environment &gt; conda remove –name $your_env_name $package_name\n\n\nchange download source of conda\n\n\ncheck download resources &gt; conda config –set show_channel_urls yes\nadd download sources to conda config &gt; conda config –add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n\nAlso you will see the infomation in file ~/.condarc \npip download sources are changed by looking at the file: ~/.pip/pip.conf"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog posts",
    "section": "",
    "text": "Welcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMay 21, 2023\n\n\nYuru\n\n\n\n\n\n\n  \n\n\n\n\nUse anaconda to setup an environment\n\n\n\n\n\n\n\ncheatsheet\n\n\n\n\nThis page tells you what is a conda environment and how to build or remove specific conda environment.\n\n\n\n\n\n\nJun 2, 2022\n\n\n\n\n\n\n  \n\n\n\n\nGit cheatsheet\n\n\n\n\n\n\n\ncheatsheet\n\n\n\n\nUseful git commands\n\n\n\n\n\n\nJun 1, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\nThis site is previoius built with fastpages, now is built with quarto.\nThe first idea of this blog is to put everything I find interesting or useful about Cheminformatics and Machine Learning here. Sometimes the topic will beyond what I just mentioned. Anyway, it just served as a place of notes for my personal usage. Hopefully it turns out nice and clean."
  }
]